
Safe_Within.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800647c  0800647c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006484  08006484  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006484  08006484  00007484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800648c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000060  080064ec  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080064ec  0000859c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c4  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ae  00000000  00000000  0001a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d28  00000000  00000000  0001da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023083  00000000  00000000  0001e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158ee  00000000  00000000  0004182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4234  00000000  00000000  00057119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b34d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  0012b390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006380 	.word	0x08006380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006380 	.word	0x08006380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <buzzer_on>:
#include "buzzer.h"

/*
 * @brief Turns ON the buzzer, by resetting the "OUT" pin.
 */
void buzzer_on(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <buzzer_on+0x14>)
 80005f6:	f001 fed3 	bl	80023a0 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <buzzer_off>:

/*
 * @brief Turns OFF the buzzer, by setting the "OUT" pin.
 */
void buzzer_off(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2104      	movs	r1, #4
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <buzzer_off+0x14>)
 800060e:	f001 fec7 	bl	80023a0 <HAL_GPIO_WritePin>

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <gsm_start_rx>:

/**
 * @brief Begins UART reception for GSM byte stream (interrupt).
 */
void gsm_start_rx(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    sim_rx_index = 0;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <gsm_start_rx+0x28>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
    line_ready = 0;
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <gsm_start_rx+0x2c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
    memset(sim_rx_buffer, 0, SIM_RX_BUFFER_SIZE);
 800062c:	2264      	movs	r2, #100	@ 0x64
 800062e:	2100      	movs	r1, #0
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <gsm_start_rx+0x30>)
 8000632:	f005 f9f7 	bl	8005a24 <memset>
    HAL_UART_Receive_IT(&huart4, &sim_rx_byte, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	4905      	ldr	r1, [pc, #20]	@ (8000650 <gsm_start_rx+0x34>)
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <gsm_start_rx+0x38>)
 800063c:	f004 fa2b 	bl	8004a96 <HAL_UART_Receive_IT>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000e4 	.word	0x200000e4
 8000648:	200000e6 	.word	0x200000e6
 800064c:	20000080 	.word	0x20000080
 8000650:	2000007c 	.word	0x2000007c
 8000654:	20000188 	.word	0x20000188

08000658 <send_at_cmd>:
 * @param size Bytes received.
 * @param timeout Maximum allowed  timeout.
 * @return RX_OK on success, RX_TIMEOUT otherwise.
 */
GSM_Response_t send_at_cmd( char *at_cmd, char *sim_response_buffer, int *size, int timeout)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
	uint32_t tickstart;
	gsm_start_rx();
 8000666:	f7ff ffd9 	bl	800061c <gsm_start_rx>
	HAL_UART_Transmit(&huart4, (uint8_t*)at_cmd, strlen(at_cmd), HAL_MAX_DELAY);
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff fdd0 	bl	8000210 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	68f9      	ldr	r1, [r7, #12]
 800067a:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <send_at_cmd+0x7c>)
 800067c:	f004 f94a 	bl	8004914 <HAL_UART_Transmit>
	tickstart = HAL_GetTick();
 8000680:	f001 fb26 	bl	8001cd0 <HAL_GetTick>
 8000684:	6178      	str	r0, [r7, #20]
	while(1){

		if ((HAL_GetTick() - tickstart) > timeout){
 8000686:	f001 fb23 	bl	8001cd0 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	1ad2      	subs	r2, r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d9f7      	bls.n	8000686 <send_at_cmd+0x2e>
			sim_rx_buffer[sim_rx_index] = '\0';
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <send_at_cmd+0x80>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <send_at_cmd+0x84>)
 800069e:	2100      	movs	r1, #0
 80006a0:	5499      	strb	r1, [r3, r2]
			strcpy(sim_response_buffer, sim_rx_buffer);
 80006a2:	490e      	ldr	r1, [pc, #56]	@ (80006dc <send_at_cmd+0x84>)
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f005 fa19 	bl	8005adc <strcpy>
			*size = sim_rx_index+1;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <send_at_cmd+0x80>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
		     sim_rx_index = 0;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <send_at_cmd+0x80>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
			 break;
 80006ba:	bf00      	nop
		}
	}
	if(*size == 0){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <send_at_cmd+0x70>
		return RX_TIMEOUT;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <send_at_cmd+0x72>
	}
	else{
		return RX_OK;
 80006c8:	2300      	movs	r3, #0
	}
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000188 	.word	0x20000188
 80006d8:	200000e4 	.word	0x200000e4
 80006dc:	20000080 	.word	0x20000080

080006e0 <gsm_init>:

GSM_State_t gsm_init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
	char gsm_wake[] = "AT\r\n";
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <gsm_init+0xdc>)
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	char gsm_rx[50];
	int rx_size=0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
	//int *rx_size = NULL;
	int timeout = AT_TIMEOUT;
 80006f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	char echo_off[] = "ATE0\r\n";
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <gsm_init+0xe0>)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000702:	6018      	str	r0, [r3, #0]
 8000704:	3304      	adds	r3, #4
 8000706:	8019      	strh	r1, [r3, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	0c0a      	lsrs	r2, r1, #16
 800070c:	701a      	strb	r2, [r3, #0]

//	GSM_Response_t status;
	HAL_UART_Transmit(&huart4, (uint8_t*)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2204      	movs	r2, #4
 8000714:	492b      	ldr	r1, [pc, #172]	@ (80007c4 <gsm_init+0xe4>)
 8000716:	482c      	ldr	r0, [pc, #176]	@ (80007c8 <gsm_init+0xe8>)
 8000718:	f004 f8fc 	bl	8004914 <HAL_UART_Transmit>
	memset(gsm_rx, 0, sizeof(gsm_rx));
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2232      	movs	r2, #50	@ 0x32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 f97d 	bl	8005a24 <memset>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	@ 0x64
 800072c:	f001 fadc 	bl	8001ce8 <HAL_Delay>

	status = send_at_cmd(gsm_wake, gsm_rx, &rx_size, timeout);
 8000730:	f107 020c 	add.w	r2, r7, #12
 8000734:	f107 0110 	add.w	r1, r7, #16
 8000738:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800073c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800073e:	f7ff ff8b 	bl	8000658 <send_at_cmd>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <gsm_init+0xec>)
 8000748:	701a      	strb	r2, [r3, #0]
	if (status == RX_OK){
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <gsm_init+0xec>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d12e      	bne.n	80007b0 <gsm_init+0xd0>

		if(strstr(gsm_rx,"OK")){
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	491e      	ldr	r1, [pc, #120]	@ (80007d0 <gsm_init+0xf0>)
 8000758:	4618      	mov	r0, r3
 800075a:	f005 f97d 	bl	8005a58 <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d025      	beq.n	80007b0 <gsm_init+0xd0>
			HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 fabf 	bl	8001ce8 <HAL_Delay>
			memset(gsm_rx, 0, sizeof(gsm_rx));
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2232      	movs	r2, #50	@ 0x32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 f956 	bl	8005a24 <memset>
			rx_size =0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
			status = send_at_cmd(echo_off, gsm_rx, &rx_size, timeout);
 800077c:	f107 020c 	add.w	r2, r7, #12
 8000780:	f107 0110 	add.w	r1, r7, #16
 8000784:	1d38      	adds	r0, r7, #4
 8000786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000788:	f7ff ff66 	bl	8000658 <send_at_cmd>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <gsm_init+0xec>)
 8000792:	701a      	strb	r2, [r3, #0]

			if(strstr(gsm_rx,"OK")){
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	490d      	ldr	r1, [pc, #52]	@ (80007d0 <gsm_init+0xf0>)
 800079a:	4618      	mov	r0, r3
 800079c:	f005 f95c 	bl	8005a58 <strstr>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d004      	beq.n	80007b0 <gsm_init+0xd0>
				HAL_Delay(100);
 80007a6:	2064      	movs	r0, #100	@ 0x64
 80007a8:	f001 fa9e 	bl	8001ce8 <HAL_Delay>

				return GSM_STATE_OK;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e000      	b.n	80007b2 <gsm_init+0xd2>
			}
		}
	}
	return GSM_STATE_ERROR;
 80007b0:	2301      	movs	r3, #1
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	0a0d5441 	.word	0x0a0d5441
 80007c0:	080063a4 	.word	0x080063a4
 80007c4:	08006398 	.word	0x08006398
 80007c8:	20000188 	.word	0x20000188
 80007cc:	200000e8 	.word	0x200000e8
 80007d0:	080063a0 	.word	0x080063a0

080007d4 <gsm_wake>:
/**
 * @brief Wakes up GSM module by sending "AT" command.
 * @return GSM_STATE_OK if success, GSM_STATE_ERROR otherwise.
 */
GSM_State_t gsm_wake(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
	char gsm_wake_up[] = "AT\r\n";
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <gsm_wake+0x70>)
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 3020 	strb.w	r3, [r7, #32]
	char gsm_rx[20];
	int rx_size = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
	int timeout = AT_TIMEOUT;
 80007e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
	memset(gsm_rx, 0, sizeof(gsm_rx));
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2214      	movs	r2, #20
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 f914 	bl	8005a24 <memset>
	status = send_at_cmd(gsm_wake_up, gsm_rx, &rx_size, timeout);
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	f107 0108 	add.w	r1, r7, #8
 8000802:	f107 001c 	add.w	r0, r7, #28
 8000806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000808:	f7ff ff26 	bl	8000658 <send_at_cmd>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <gsm_wake+0x74>)
 8000812:	701a      	strb	r2, [r3, #0]
		if (status == RX_OK){
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <gsm_wake+0x74>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10e      	bne.n	800083a <gsm_wake+0x66>
			if (strncmp(gsm_rx, "\r\nOK\r\n", rx_size) == 0){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	461a      	mov	r2, r3
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4909      	ldr	r1, [pc, #36]	@ (800084c <gsm_wake+0x78>)
 8000826:	4618      	mov	r0, r3
 8000828:	f005 f904 	bl	8005a34 <strncmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <gsm_wake+0x66>
				rx_size = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
				return GSM_STATE_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <gsm_wake+0x68>
			}
		}
		return GSM_STATE_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	0a0d5441 	.word	0x0a0d5441
 8000848:	200000e8 	.word	0x200000e8
 800084c:	080063ac 	.word	0x080063ac

08000850 <gsm_call>:
 * @brief Initiates call to provided number.
 * @param number Phone number
 * @return GSM_STATE_OK if call succeed, GSM_STATE_ERROR otherwise.
 */
GSM_State_t gsm_call(const char *number)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09a      	sub	sp, #104	@ 0x68
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    char dial[30];
    snprintf(dial, sizeof(dial), "ATD+%s;\r\n", number);
 8000858:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <gsm_call+0x80>)
 8000860:	211e      	movs	r1, #30
 8000862:	f005 f8a9 	bl	80059b8 <sniprintf>
    char gsm_rx[50];
    int rx_size = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
    int timeout = AT_TIMEOUT;
 800086a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800086e:	667b      	str	r3, [r7, #100]	@ 0x64

    memset(gsm_rx, 0, sizeof(gsm_rx));
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2232      	movs	r2, #50	@ 0x32
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f005 f8d3 	bl	8005a24 <memset>
    status = send_at_cmd(dial, gsm_rx, &rx_size, timeout);
 800087e:	f107 020c 	add.w	r2, r7, #12
 8000882:	f107 0110 	add.w	r1, r7, #16
 8000886:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800088a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800088c:	f7ff fee4 	bl	8000658 <send_at_cmd>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <gsm_call+0x84>)
 8000896:	701a      	strb	r2, [r3, #0]
    if (status == RX_OK){
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <gsm_call+0x84>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d112      	bne.n	80008c6 <gsm_call+0x76>
    	if (strncmp(gsm_rx, "\r\nOK\r\n", rx_size) == 0){
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	461a      	mov	r2, r3
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	490b      	ldr	r1, [pc, #44]	@ (80008d8 <gsm_call+0x88>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 f8c2 	bl	8005a34 <strncmp>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d107      	bne.n	80008c6 <gsm_call+0x76>
    		HAL_Delay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ba:	f001 fa15 	bl	8001ce8 <HAL_Delay>
    		rx_size = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]

    		return GSM_STATE_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <gsm_call+0x78>
    	}
    }
    return GSM_STATE_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3768      	adds	r7, #104	@ 0x68
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	080063b4 	.word	0x080063b4
 80008d4:	200000e8 	.word	0x200000e8
 80008d8:	080063ac 	.word	0x080063ac

080008dc <gsm_sms>:
 * @param number  phone number.
 * @param message Message string to send.
 * @return GSM_STATE_OK if SMS is sent, GSM_STATE_ERROR otherwise.
 */
GSM_State_t gsm_sms(const char *number, const char *message)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a8      	sub	sp, #160	@ 0xa0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	char gsm_text_mode[] = "AT+CMGF=1\r\n";
 80008e6:	4a5b      	ldr	r2, [pc, #364]	@ (8000a54 <gsm_sms+0x178>)
 80008e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80008ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char gsm_rx[30];
	int rx_size = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66bb      	str	r3, [r7, #104]	@ 0x68
	int timeout = AT_TIMEOUT;
 80008f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	char gsm_send_sms[50];
	char msg[40] = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2228      	movs	r2, #40	@ 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f005 f88c 	bl	8005a24 <memset>
	int len;

	snprintf(gsm_send_sms, sizeof(gsm_send_sms), "AT+CMGS=\"+%s\"\r\n", number);
 800090c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a51      	ldr	r2, [pc, #324]	@ (8000a58 <gsm_sms+0x17c>)
 8000914:	2132      	movs	r1, #50	@ 0x32
 8000916:	f005 f84f 	bl	80059b8 <sniprintf>
	memset(gsm_rx, 0, sizeof(gsm_rx));
 800091a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800091e:	221e      	movs	r2, #30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f005 f87e 	bl	8005a24 <memset>

	status = send_at_cmd(gsm_text_mode, gsm_rx, &rx_size, timeout);
 8000928:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800092c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000930:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8000934:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000938:	f7ff fe8e 	bl	8000658 <send_at_cmd>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b46      	ldr	r3, [pc, #280]	@ (8000a5c <gsm_sms+0x180>)
 8000942:	701a      	strb	r2, [r3, #0]
	if (status == RX_OK){
 8000944:	4b45      	ldr	r3, [pc, #276]	@ (8000a5c <gsm_sms+0x180>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d17e      	bne.n	8000a4a <gsm_sms+0x16e>
		if (strncmp(gsm_rx, "\r\nOK\r\n", rx_size) == 0){
 800094c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800094e:	461a      	mov	r2, r3
 8000950:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000954:	4942      	ldr	r1, [pc, #264]	@ (8000a60 <gsm_sms+0x184>)
 8000956:	4618      	mov	r0, r3
 8000958:	f005 f86c 	bl	8005a34 <strncmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d173      	bne.n	8000a4a <gsm_sms+0x16e>
			HAL_Delay(100);
 8000962:	2064      	movs	r0, #100	@ 0x64
 8000964:	f001 f9c0 	bl	8001ce8 <HAL_Delay>
			memset(gsm_rx, 0, sizeof(gsm_rx));
 8000968:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800096c:	221e      	movs	r2, #30
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f005 f857 	bl	8005a24 <memset>
			rx_size = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	66bb      	str	r3, [r7, #104]	@ 0x68

			status = send_at_cmd(gsm_send_sms, gsm_rx, &rx_size, timeout);
 800097a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800097e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000982:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000986:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800098a:	f7ff fe65 	bl	8000658 <send_at_cmd>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <gsm_sms+0x180>)
 8000994:	701a      	strb	r2, [r3, #0]
			if (status == RX_OK){
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <gsm_sms+0x180>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d155      	bne.n	8000a4a <gsm_sms+0x16e>
				if (strncmp(gsm_rx, "\r\n> ", rx_size) == 0){
 800099e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009a0:	461a      	mov	r2, r3
 80009a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009a6:	492f      	ldr	r1, [pc, #188]	@ (8000a64 <gsm_sms+0x188>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f005 f843 	bl	8005a34 <strncmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d14a      	bne.n	8000a4a <gsm_sms+0x16e>
					len = strlen(message);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff fc2b 	bl	8000210 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

					if (len < sizeof(msg) - 1) {
 80009c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80009c4:	2b26      	cmp	r3, #38	@ 0x26
 80009c6:	d840      	bhi.n	8000a4a <gsm_sms+0x16e>
						strcpy(msg, message);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 f884 	bl	8005adc <strcpy>
						msg[len] = 26;
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80009dc:	4413      	add	r3, r2
 80009de:	221a      	movs	r2, #26
 80009e0:	701a      	strb	r2, [r3, #0]
						msg[len + 1] = '\0';
 80009e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80009e6:	3301      	adds	r3, #1
 80009e8:	33a0      	adds	r3, #160	@ 0xa0
 80009ea:	443b      	add	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	f803 2c94 	strb.w	r2, [r3, #-148]

						HAL_Delay(100);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f001 f978 	bl	8001ce8 <HAL_Delay>
					    memset(gsm_rx, 0, sizeof(gsm_rx));
 80009f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009fc:	221e      	movs	r2, #30
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 f80f 	bl	8005a24 <memset>
					    rx_size = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	@ 0x68
					    status = send_at_cmd(msg, gsm_rx, &rx_size, CALL_TIMEOUT);
 8000a0a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000a0e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000a12:	f107 000c 	add.w	r0, r7, #12
 8000a16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a1a:	f7ff fe1d 	bl	8000658 <send_at_cmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <gsm_sms+0x180>)
 8000a24:	701a      	strb	r2, [r3, #0]

					    if (status == RX_OK){
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <gsm_sms+0x180>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10d      	bne.n	8000a4a <gsm_sms+0x16e>
						    if (strncmp(gsm_rx, "\r\n+CMGS:", 8) == 0){
 8000a2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a32:	2208      	movs	r2, #8
 8000a34:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <gsm_sms+0x18c>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fffc 	bl	8005a34 <strncmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <gsm_sms+0x16e>

							rx_size = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66bb      	str	r3, [r7, #104]	@ 0x68
							return GSM_STATE_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <gsm_sms+0x170>
				}
			}
     	}
     }
  }
	return GSM_STATE_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	37a0      	adds	r7, #160	@ 0xa0
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	080063e4 	.word	0x080063e4
 8000a58:	080063c0 	.word	0x080063c0
 8000a5c:	200000e8 	.word	0x200000e8
 8000a60:	080063ac 	.word	0x080063ac
 8000a64:	080063d0 	.word	0x080063d0
 8000a68:	080063d8 	.word	0x080063d8

08000a6c <call_sms_function>:

void call_sms_function(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
    GSM_State_t result_wake;
    result_wake = gsm_wake();
 8000a72:	f7ff feaf 	bl	80007d4 <gsm_wake>
 8000a76:	4603      	mov	r3, r0
 8000a78:	75fb      	strb	r3, [r7, #23]
    int call_sms_maxtry =3;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	60bb      	str	r3, [r7, #8]
    int call_sms_count=0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
    // Try call and sms by checking gsm condition state  3 times
    while( call_sms_count<=call_sms_maxtry){
 8000a82:	e04d      	b.n	8000b20 <call_sms_function+0xb4>


       if (result_wake == GSM_STATE_OK) {
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d140      	bne.n	8000b0c <call_sms_function+0xa0>
           gsm_call(EMERGENCY_CONTACT_1);
 8000a8a:	482a      	ldr	r0, [pc, #168]	@ (8000b34 <call_sms_function+0xc8>)
 8000a8c:	f7ff fee0 	bl	8000850 <gsm_call>
           gsm_sms(EMERGENCY_CONTACT_1, MESSAGE);
 8000a90:	4929      	ldr	r1, [pc, #164]	@ (8000b38 <call_sms_function+0xcc>)
 8000a92:	4828      	ldr	r0, [pc, #160]	@ (8000b34 <call_sms_function+0xc8>)
 8000a94:	f7ff ff22 	bl	80008dc <gsm_sms>
          // HAL_Delay(10000);
           uint32_t call_time;
           call_time=g_time;
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <call_sms_function+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	607b      	str	r3, [r7, #4]
           while(1){
        	   if(g_time-call_time > CALL_INTERVAL){
 8000a9e:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <call_sms_function+0xd0>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000aaa:	d925      	bls.n	8000af8 <call_sms_function+0x8c>
            	  result_wake = gsm_wake();
 8000aac:	f7ff fe92 	bl	80007d4 <gsm_wake>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	75fb      	strb	r3, [r7, #23]
            	  int second_call_maxtry =3;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	603b      	str	r3, [r7, #0]
            	  int second_call_count=0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
            	  // call and sms secondary contact number after primary number by again AT\r\n command and trying 3 times for checking for appropriate response
            	  while(second_call_count<=second_call_maxtry){
 8000abc:	e018      	b.n	8000af0 <call_sms_function+0x84>
            		  if (result_wake == GSM_STATE_OK) {
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10b      	bne.n	8000adc <call_sms_function+0x70>
            			  gsm_call(EMERGENCY_CONTACT_3);
 8000ac4:	481e      	ldr	r0, [pc, #120]	@ (8000b40 <call_sms_function+0xd4>)
 8000ac6:	f7ff fec3 	bl	8000850 <gsm_call>
            			  gsm_sms(EMERGENCY_CONTACT_3, MESSAGE);
 8000aca:	491b      	ldr	r1, [pc, #108]	@ (8000b38 <call_sms_function+0xcc>)
 8000acc:	481c      	ldr	r0, [pc, #112]	@ (8000b40 <call_sms_function+0xd4>)
 8000ace:	f7ff ff05 	bl	80008dc <gsm_sms>
            			  HAL_Delay(1000);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad6:	f001 f907 	bl	8001ce8 <HAL_Delay>
            			  break;
 8000ada:	e00d      	b.n	8000af8 <call_sms_function+0x8c>
            		  }
            		  else{
            			  result_wake = gsm_wake();
 8000adc:	f7ff fe7a 	bl	80007d4 <gsm_wake>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	75fb      	strb	r3, [r7, #23]
            			  second_call_count++;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
            			  HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	@ 0x64
 8000aec:	f001 f8fc 	bl	8001ce8 <HAL_Delay>
            	  while(second_call_count<=second_call_maxtry){
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dde2      	ble.n	8000abe <call_sms_function+0x52>
            		  }
            	  }
        	   }
        	   if (switch_flag == 0){
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <call_sms_function+0xd8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1ce      	bne.n	8000a9e <call_sms_function+0x32>
        		   buzzer_off();
 8000b00:	f7ff fd80 	bl	8000604 <buzzer_off>
//        		   pir_state = ACTIVE;
        		   switch_flag = 1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <call_sms_function+0xd8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
        		   break;
 8000b0a:	e009      	b.n	8000b20 <call_sms_function+0xb4>
        	   }
           }
       }
       else{
    	   result_wake = gsm_wake();
 8000b0c:	f7ff fe62 	bl	80007d4 <gsm_wake>
 8000b10:	4603      	mov	r3, r0
 8000b12:	75fb      	strb	r3, [r7, #23]
    	   call_sms_count++;
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	3301      	adds	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
    	   HAL_Delay(100);
 8000b1a:	2064      	movs	r0, #100	@ 0x64
 8000b1c:	f001 f8e4 	bl	8001ce8 <HAL_Delay>
    while( call_sms_count<=call_sms_maxtry){
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	ddad      	ble.n	8000a84 <call_sms_function+0x18>
       }
    }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	080063f0 	.word	0x080063f0
 8000b38:	08006400 	.word	0x08006400
 8000b3c:	20000218 	.word	0x20000218
 8000b40:	0800641c 	.word	0x0800641c
 8000b44:	20000000 	.word	0x20000000

08000b48 <gsm_reset>:

/**
 * @brief Sends GSM reset command via UART to ensure GSM is in Command mode, not in text prompt mode.
 */
void gsm_reset(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	    uint8_t esc = 0x1B;  // ESC key
 8000b4e:	231b      	movs	r3, #27
 8000b50:	71fb      	strb	r3, [r7, #7]
	    HAL_UART_Transmit(&huart4, &esc, 1, HAL_MAX_DELAY);
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2201      	movs	r2, #1
 8000b5a:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <gsm_reset+0x3c>)
 8000b5c:	f003 feda 	bl	8004914 <HAL_UART_Transmit>
	    HAL_Delay(200);
 8000b60:	20c8      	movs	r0, #200	@ 0xc8
 8000b62:	f001 f8c1 	bl	8001ce8 <HAL_Delay>
	    HAL_UART_Transmit(&huart4, &esc, 1, HAL_MAX_DELAY);
 8000b66:	1df9      	adds	r1, r7, #7
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <gsm_reset+0x3c>)
 8000b70:	f003 fed0 	bl	8004914 <HAL_UART_Transmit>
	    HAL_Delay(200);
 8000b74:	20c8      	movs	r0, #200	@ 0xc8
 8000b76:	f001 f8b7 	bl	8001ce8 <HAL_Delay>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000188 	.word	0x20000188

08000b88 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Callback: Timer Period Elapsed
 *
 * This is called whenever TIM6 overflows. Used as global timebase (g_time).
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a06      	ldr	r2, [pc, #24]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d104      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	g_time++ ;    //    Tick counter (ms resolution)
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ba2:	6013      	str	r3, [r2, #0]
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	20000218 	.word	0x20000218

08000bb8 <HAL_UART_RxCpltCallback>:
/**
 * @brief Callback: UART Receive Complete
 *
 * Handles USART2 (Modbus) and UART4 (GSM) reception logic.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	/*
	 * 		Callback for MODBUS (UART2)
	 */
	if (huart->Instance == USART2){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <HAL_UART_RxCpltCallback+0x78>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d114      	bne.n	8000bf4 <HAL_UART_RxCpltCallback+0x3c>
		uart_flag = 1;                              // Indicate frame reception started
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_RxCpltCallback+0x7c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
		uart_int_time = g_time;                     // Used as a clock watch
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_UART_RxCpltCallback+0x80>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <HAL_UART_RxCpltCallback+0x84>)
 8000bd6:	6013      	str	r3, [r2, #0]
		modbus_frame[uart_index++] = data;          // Store data into modbus
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_UART_RxCpltCallback+0x88>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4918      	ldr	r1, [pc, #96]	@ (8000c40 <HAL_UART_RxCpltCallback+0x88>)
 8000be0:	600a      	str	r2, [r1, #0]
 8000be2:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_UART_RxCpltCallback+0x8c>)
 8000be4:	7811      	ldrb	r1, [r2, #0]
 8000be6:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <HAL_UART_RxCpltCallback+0x90>)
 8000be8:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart2, &data, 1);     // Restart reception
 8000bea:	2201      	movs	r2, #1
 8000bec:	4915      	ldr	r1, [pc, #84]	@ (8000c44 <HAL_UART_RxCpltCallback+0x8c>)
 8000bee:	4817      	ldr	r0, [pc, #92]	@ (8000c4c <HAL_UART_RxCpltCallback+0x94>)
 8000bf0:	f003 ff51 	bl	8004a96 <HAL_UART_Receive_IT>
	}

	/*
	 * 			Callback for GSM  (UART4)
	 */
    if (huart->Instance == UART4)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <HAL_UART_RxCpltCallback+0x98>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d113      	bne.n	8000c26 <HAL_UART_RxCpltCallback+0x6e>
    {
        if (sim_rx_index < SIM_RX_BUFFER_SIZE - 1)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	2b62      	cmp	r3, #98	@ 0x62
 8000c04:	d80a      	bhi.n	8000c1c <HAL_UART_RxCpltCallback+0x64>
        {
            sim_rx_buffer[sim_rx_index++] = sim_rx_byte;    // Save incoming GSM char
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	b291      	uxth	r1, r2
 8000c0e:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c10:	8011      	strh	r1, [r2, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_UART_RxCpltCallback+0xa0>)
 8000c16:	7819      	ldrb	r1, [r3, #0]
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000c1a:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(&huart4, &sim_rx_byte, 1);     // Restart reception
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	490e      	ldr	r1, [pc, #56]	@ (8000c58 <HAL_UART_RxCpltCallback+0xa0>)
 8000c20:	480f      	ldr	r0, [pc, #60]	@ (8000c60 <HAL_UART_RxCpltCallback+0xa8>)
 8000c22:	f003 ff38 	bl	8004a96 <HAL_UART_Receive_IT>
    }

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	2000021c 	.word	0x2000021c
 8000c38:	20000218 	.word	0x20000218
 8000c3c:	20000220 	.word	0x20000220
 8000c40:	2000022c 	.word	0x2000022c
 8000c44:	20000228 	.word	0x20000228
 8000c48:	20000308 	.word	0x20000308
 8000c4c:	200001d0 	.word	0x200001d0
 8000c50:	40004c00 	.word	0x40004c00
 8000c54:	200000e4 	.word	0x200000e4
 8000c58:	2000007c 	.word	0x2000007c
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	20000188 	.word	0x20000188

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 ffcb 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 f8bb 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f000 f9dd 	bl	8001030 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000c76:	f000 f951 	bl	8000f1c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000c7a:	f000 f9af 	bl	8000fdc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000c7e:	f000 f983 	bl	8000f88 <MX_UART4_Init>
  MX_I2C1_Init();
 8000c82:	f000 f91d 	bl	8000ec0 <MX_I2C1_Init>
  States pir_state;

  /*
   *  Trigger buzzer for short time to indicate that  device is  activated
   */
  buzzer_on();
 8000c86:	f7ff fcb1 	bl	80005ec <buzzer_on>
  HAL_Delay(500);
 8000c8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c8e:	f001 f82b 	bl	8001ce8 <HAL_Delay>
  buzzer_off();
 8000c92:	f7ff fcb7 	bl	8000604 <buzzer_off>


  /* Initialize GSM module */
  gsm_reset();
 8000c96:	f7ff ff57 	bl	8000b48 <gsm_reset>
  result = gsm_init();
 8000c9a:	f7ff fd21 	bl	80006e0 <gsm_init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b45      	ldr	r3, [pc, #276]	@ (8000db8 <main+0x154>)
 8000ca4:	701a      	strb	r2, [r3, #0]

  /* Start TIM6 as periodic interrupt (timebase) */
  HAL_TIM_Base_Start_IT(&htim6);
 8000ca6:	4845      	ldr	r0, [pc, #276]	@ (8000dbc <main+0x158>)
 8000ca8:	f003 fb26 	bl	80042f8 <HAL_TIM_Base_Start_IT>
  time_check = g_time;  // Reference time for PIR  state monitoring
 8000cac:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <main+0x15c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a44      	ldr	r2, [pc, #272]	@ (8000dc4 <main+0x160>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /*
   * 	Testing I2C
   */
  uint16_t EepromAddress = 80;
 8000cb4:	2350      	movs	r3, #80	@ 0x50
 8000cb6:	827b      	strh	r3, [r7, #18]
  uint16_t DevAddress = EepromAddress << 1;
 8000cb8:	8a7b      	ldrh	r3, [r7, #18]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	823b      	strh	r3, [r7, #16]
  uint8_t Transmit_data[3] = {0x00, 0x00, 0xAA};
 8000cbe:	4a42      	ldr	r2, [pc, #264]	@ (8000dc8 <main+0x164>)
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	8019      	strh	r1, [r3, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	0c12      	lsrs	r2, r2, #16
 8000cce:	701a      	strb	r2, [r3, #0]
  uint8_t Read_address[2] = {0x00, 0x00};
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	80bb      	strh	r3, [r7, #4]
//  uint16_t Data_size = 1;
  uint8_t Received_data = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef i2c_status;

  i2c_status = HAL_I2C_IsDeviceReady(&hi2c1, DevAddress, (uint32_t)I2C_TRIALS, (uint32_t)AT_TIMEOUT);
 8000cd8:	8a39      	ldrh	r1, [r7, #16]
 8000cda:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cde:	2205      	movs	r2, #5
 8000ce0:	483a      	ldr	r0, [pc, #232]	@ (8000dcc <main+0x168>)
 8000ce2:	f002 f81d 	bl	8002d20 <HAL_I2C_IsDeviceReady>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73bb      	strb	r3, [r7, #14]
  if (i2c_status == HAL_OK){
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d11c      	bne.n	8000d2a <main+0xc6>
	  HAL_I2C_Master_Transmit(&hi2c1, DevAddress, Transmit_data, 3, HAL_MAX_DELAY);
 8000cf0:	f107 0208 	add.w	r2, r7, #8
 8000cf4:	8a39      	ldrh	r1, [r7, #16]
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	4833      	ldr	r0, [pc, #204]	@ (8000dcc <main+0x168>)
 8000d00:	f001 fcde 	bl	80026c0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, DevAddress, Read_address, 2, HAL_MAX_DELAY);
 8000d04:	1d3a      	adds	r2, r7, #4
 8000d06:	8a39      	ldrh	r1, [r7, #16]
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	482e      	ldr	r0, [pc, #184]	@ (8000dcc <main+0x168>)
 8000d12:	f001 fcd5 	bl	80026c0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, DevAddress, Received_data, 1, HAL_MAX_DELAY);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	8a39      	ldrh	r1, [r7, #16]
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	4829      	ldr	r0, [pc, #164]	@ (8000dcc <main+0x168>)
 8000d26:	f001 fdc9 	bl	80028bc <HAL_I2C_Master_Receive>

                                 /* Main Loop */
  while (1)
  {
	  /* Monitor PIR sensors in given interval */
	  pir_state = get_pir_state();
 8000d2a:	f000 fcf9 	bl	8001720 <get_pir_state>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	737b      	strb	r3, [r7, #13]
//		  pir_state = ACTIVE;
//		  switch_flag = 1;
//	  }

	  /* PIR ALERT state -> trigger buzzer and GSM call/sms */
	  if (pir_state == ALERT){
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d118      	bne.n	8000d6a <main+0x106>
		  buzzer_on();    // Trigger buzzer
 8000d38:	f7ff fc58 	bl	80005ec <buzzer_on>
		  int gsm_count = 0;   //Initialize gsm_counter as 0.
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

		  // Check for result response and retry upto 3 times until  result == GSM_STATE_OK
		  while(gsm_count <= MAX_GSM_INIT_ATTEMPTS){
 8000d40:	e00f      	b.n	8000d62 <main+0xfe>
			  if (result == GSM_STATE_OK){
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <main+0x154>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <main+0xec>
				   call_sms_function();  // Trigger Call and SMS via GSM
 8000d4a:	f7ff fe8f 	bl	8000a6c <call_sms_function>
				   break;
 8000d4e:	e00e      	b.n	8000d6e <main+0x10a>
			  }
			  else{
				  result = gsm_init();  // Retry initialization
 8000d50:	f7ff fcc6 	bl	80006e0 <gsm_init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <main+0x154>)
 8000d5a:	701a      	strb	r2, [r3, #0]
				  gsm_count++;  // Increment gsm_counter until its value <=3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
		  while(gsm_count <= MAX_GSM_INIT_ATTEMPTS){
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	ddec      	ble.n	8000d42 <main+0xde>
 8000d68:	e001      	b.n	8000d6e <main+0x10a>
			  }
		  }
	  }

	  else {
		  buzzer_off();  // Buzzer-OfF if pir_state is other than ALERT
 8000d6a:	f7ff fc4b 	bl	8000604 <buzzer_off>
	  }

	  /* Check again for Modbus frame completion */
	  if (uart_flag){
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <main+0x16c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0d9      	beq.n	8000d2a <main+0xc6>
		  uart_idle_time = g_time - uart_int_time;
 8000d76:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <main+0x15c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <main+0x170>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <main+0x174>)
 8000d82:	6013      	str	r3, [r2, #0]
		  if (uart_idle_time > UART_TIMEOUT){
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <main+0x174>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d9ce      	bls.n	8000d2a <main+0xc6>
			  memcpy(request_t.message, modbus_frame, uart_index);
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <main+0x178>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4913      	ldr	r1, [pc, #76]	@ (8000de0 <main+0x17c>)
 8000d94:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <main+0x180>)
 8000d96:	f004 fea9 	bl	8005aec <memcpy>
			  request_t.size = uart_index;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <main+0x178>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <main+0x180>)
 8000da2:	811a      	strh	r2, [r3, #8]
			  uart_index = 0;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <main+0x178>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
			  uart_flag = 0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <main+0x16c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
			  Process_Modbus_Frame(modbus_frame);
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <main+0x17c>)
 8000db2:	f000 fac7 	bl	8001344 <Process_Modbus_Frame>
	  pir_state = get_pir_state();
 8000db6:	e7b8      	b.n	8000d2a <main+0xc6>
 8000db8:	200000e7 	.word	0x200000e7
 8000dbc:	20000140 	.word	0x20000140
 8000dc0:	20000218 	.word	0x20000218
 8000dc4:	2000023c 	.word	0x2000023c
 8000dc8:	0800642c 	.word	0x0800642c
 8000dcc:	200000ec 	.word	0x200000ec
 8000dd0:	2000021c 	.word	0x2000021c
 8000dd4:	20000220 	.word	0x20000220
 8000dd8:	20000224 	.word	0x20000224
 8000ddc:	2000022c 	.word	0x2000022c
 8000de0:	20000308 	.word	0x20000308
 8000de4:	20000230 	.word	0x20000230

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2234      	movs	r2, #52	@ 0x34
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 fe14 	bl	8005a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <SystemClock_Config+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e48:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e5c:	23a8      	movs	r3, #168	@ 0xa8
 8000e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e64:	2307      	movs	r3, #7
 8000e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 ff53 	bl	8003d1c <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e7c:	f000 fa20 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fbf2 	bl	8003688 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eaa:	f000 fa09 	bl	80012c0 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3750      	adds	r7, #80	@ 0x50
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <MX_I2C1_Init+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_I2C1_Init+0x58>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ed8:	2220      	movs	r2, #32
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_I2C1_Init+0x50>)
 8000efe:	f001 fa9b 	bl	8002438 <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f9da 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40005400 	.word	0x40005400
 8000f18:	00061a80 	.word	0x00061a80

08000f1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f2c:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <MX_TIM6_Init+0x68>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f32:	2253      	movs	r2, #83	@ 0x53
 8000f34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f3e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f4c:	f003 f984 	bl	8004258 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f56:	f000 f9b3 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_TIM6_Init+0x64>)
 8000f68:	f003 fbf4 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f72:	f000 f9a5 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000140 	.word	0x20000140
 8000f84:	40001000 	.word	0x40001000

08000f88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <MX_UART4_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000f94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_UART4_Init+0x4c>)
 8000fc0:	f003 fc58 	bl	8004874 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 f979 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000188 	.word	0x20000188
 8000fd8:	40004c00 	.word	0x40004c00

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <MX_USART2_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001014:	f003 fc2e 	bl	8004874 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101e:	f000 f94f 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001d0 	.word	0x200001d0
 800102c:	40004400 	.word	0x40004400

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b96      	ldr	r3, [pc, #600]	@ (80012a4 <MX_GPIO_Init+0x274>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a95      	ldr	r2, [pc, #596]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b93      	ldr	r3, [pc, #588]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b8f      	ldr	r3, [pc, #572]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a8e      	ldr	r2, [pc, #568]	@ (80012a4 <MX_GPIO_Init+0x274>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b8c      	ldr	r3, [pc, #560]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b88      	ldr	r3, [pc, #544]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a87      	ldr	r2, [pc, #540]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b81      	ldr	r3, [pc, #516]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a80      	ldr	r2, [pc, #512]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b7e      	ldr	r3, [pc, #504]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b7a      	ldr	r3, [pc, #488]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a79      	ldr	r2, [pc, #484]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b77      	ldr	r3, [pc, #476]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b73      	ldr	r3, [pc, #460]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a72      	ldr	r2, [pc, #456]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b70      	ldr	r3, [pc, #448]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b6c      	ldr	r3, [pc, #432]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a6b      	ldr	r2, [pc, #428]	@ (80012a4 <MX_GPIO_Init+0x274>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b69      	ldr	r3, [pc, #420]	@ (80012a4 <MX_GPIO_Init+0x274>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2104      	movs	r1, #4
 800110e:	4866      	ldr	r0, [pc, #408]	@ (80012a8 <MX_GPIO_Init+0x278>)
 8001110:	f001 f946 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f244 0181 	movw	r1, #16513	@ 0x4081
 800111a:	4864      	ldr	r0, [pc, #400]	@ (80012ac <MX_GPIO_Init+0x27c>)
 800111c:	f001 f940 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	4862      	ldr	r0, [pc, #392]	@ (80012b0 <MX_GPIO_Init+0x280>)
 8001126:	f001 f93b 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PIR_1_LED_Pin|PIR_2_LED_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2118      	movs	r1, #24
 800112e:	4861      	ldr	r0, [pc, #388]	@ (80012b4 <MX_GPIO_Init+0x284>)
 8001130:	f001 f936 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001134:	2304      	movs	r3, #4
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4857      	ldr	r0, [pc, #348]	@ (80012a8 <MX_GPIO_Init+0x278>)
 800114c:	f000 ff94 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4854      	ldr	r0, [pc, #336]	@ (80012b8 <MX_GPIO_Init+0x288>)
 8001168:	f000 ff86 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800116c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4849      	ldr	r0, [pc, #292]	@ (80012ac <MX_GPIO_Init+0x27c>)
 8001186:	f000 ff77 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800119c:	2307      	movs	r3, #7
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4843      	ldr	r0, [pc, #268]	@ (80012b4 <MX_GPIO_Init+0x284>)
 80011a8:	f000 ff66 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIR_1_Pin PIR_2_Pin */
  GPIO_InitStruct.Pin = PIR_1_Pin|PIR_2_Pin;
 80011ac:	230c      	movs	r3, #12
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	483b      	ldr	r0, [pc, #236]	@ (80012b0 <MX_GPIO_Init+0x280>)
 80011c2:	f000 ff59 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011c6:	2340      	movs	r3, #64	@ 0x40
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <MX_GPIO_Init+0x280>)
 80011de:	f000 ff4b 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	482e      	ldr	r0, [pc, #184]	@ (80012b0 <MX_GPIO_Init+0x280>)
 80011f6:	f000 ff3f 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011fa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800120c:	230a      	movs	r3, #10
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4829      	ldr	r0, [pc, #164]	@ (80012bc <MX_GPIO_Init+0x28c>)
 8001218:	f000 ff2e 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800121c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4822      	ldr	r0, [pc, #136]	@ (80012bc <MX_GPIO_Init+0x28c>)
 8001232:	f000 ff21 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIR_1_LED_Pin PIR_2_LED_Pin */
  GPIO_InitStruct.Pin = PIR_1_LED_Pin|PIR_2_LED_Pin;
 8001236:	2318      	movs	r3, #24
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <MX_GPIO_Init+0x284>)
 800124e:	f000 ff13 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001256:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125c:	2301      	movs	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <MX_GPIO_Init+0x284>)
 8001268:	f000 ff06 	bl	8002078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2008      	movs	r0, #8
 8001272:	f000 fe38 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001276:	2008      	movs	r0, #8
 8001278:	f000 fe51 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2009      	movs	r0, #9
 8001282:	f000 fe30 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001286:	2009      	movs	r0, #9
 8001288:	f000 fe49 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2017      	movs	r0, #23
 8001292:	f000 fe28 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001296:	2017      	movs	r0, #23
 8001298:	f000 fe41 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	@ 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020000 	.word	0x40020000

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <Modbus_CRC16>:
 * @brief Function to calculate the CRC_16
 * @param buf points to the data buffer for the request/response frame
 * @param len gives the number of bytes in the request/response frame
 * @retval crc returns the 16 bit calculated crc value
 */
uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 80012d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012dc:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e022      	b.n	800132a <Modbus_CRC16+0x5e>
        crc ^= buf[pos];
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	8afb      	ldrh	r3, [r7, #22]
 80012f0:	4053      	eors	r3, r2
 80012f2:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 8; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e011      	b.n	800131e <Modbus_CRC16+0x52>
            if (crc & 0x0001)
 80012fa:	8afb      	ldrh	r3, [r7, #22]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <Modbus_CRC16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <Modbus_CRC16+0x74>)
 800130c:	4053      	eors	r3, r2
 800130e:	82fb      	strh	r3, [r7, #22]
 8001310:	e002      	b.n	8001318 <Modbus_CRC16+0x4c>
            else
                crc >>= 1;
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 8; i++) {
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b07      	cmp	r3, #7
 8001322:	ddea      	ble.n	80012fa <Modbus_CRC16+0x2e>
    for (int pos = 0; pos < len; pos++) {
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbd8      	blt.n	80012e4 <Modbus_CRC16+0x18>
        }
    }
    return crc;
 8001332:	8afb      	ldrh	r3, [r7, #22]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	ffffa001 	.word	0xffffa001

08001344 <Process_Modbus_Frame>:
/*
 * @brief Function that parses the request message frame and then generates and transmits the corresponding response frame
 * @param modbus_frame Points to the request message frame
 * @retval None
 */
void Process_Modbus_Frame(uint8_t * modbus_frame){
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	@ 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	// can be used to read stored values from holding registers
//	holding_registers[0] = 0x1234;
//	holding_registers[1] = 0x1001;
//	holding_registers[2] = 0x1212;

	uint8_t slave_address = modbus_frame[0];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t function_code = modbus_frame[1];
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if (function_code == READ_SINGLE_REGISTER){
 800135c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001360:	2b03      	cmp	r3, #3
 8001362:	f040 809b 	bne.w	800149c <Process_Modbus_Frame+0x158>
		uint16_t received_crc =  modbus_frame[6] | (modbus_frame[7] << 8);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3306      	adds	r3, #6
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b21a      	sxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3307      	adds	r3, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	827b      	strh	r3, [r7, #18]
		uint16_t calculated_crc = Modbus_CRC16(modbus_frame, 6);
 8001380:	2106      	movs	r1, #6
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <Modbus_CRC16>
 8001388:	4603      	mov	r3, r0
 800138a:	823b      	strh	r3, [r7, #16]

		if (received_crc != calculated_crc) return;
 800138c:	8a7a      	ldrh	r2, [r7, #18]
 800138e:	8a3b      	ldrh	r3, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 817a 	bne.w	800168a <Process_Modbus_Frame+0x346>
		if (slave_address != 0x01) return;
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139a:	2b01      	cmp	r3, #1
 800139c:	f040 8177 	bne.w	800168e <Process_Modbus_Frame+0x34a>


		uint16_t start_address = (modbus_frame[2] << 8) | modbus_frame[3];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3302      	adds	r3, #2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	81fb      	strh	r3, [r7, #14]
		register_count = (modbus_frame[4] << 8) | modbus_frame[5];
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3305      	adds	r3, #5
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <Process_Modbus_Frame+0x238>)
 80013d6:	801a      	strh	r2, [r3, #0]

		if (register_count >10) return;
 80013d8:	4b68      	ldr	r3, [pc, #416]	@ (800157c <Process_Modbus_Frame+0x238>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b0a      	cmp	r3, #10
 80013de:	f200 8158 	bhi.w	8001692 <Process_Modbus_Frame+0x34e>
	    reply[0] = slave_address;
 80013e2:	4a67      	ldr	r2, [pc, #412]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 80013e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013e8:	7013      	strb	r3, [r2, #0]
	    reply[1] = function_code;
 80013ea:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 80013ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013f0:	7053      	strb	r3, [r2, #1]
	    reply[2] = register_count * 2; // byte count
 80013f2:	4b62      	ldr	r3, [pc, #392]	@ (800157c <Process_Modbus_Frame+0x238>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b60      	ldr	r3, [pc, #384]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 80013fe:	709a      	strb	r2, [r3, #2]

	    for (int i = 0; i < register_count; i++) {	 // takes value from holding register and puts it into response frame
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001404:	e019      	b.n	800143a <Process_Modbus_Frame+0xf6>
	        uint16_t val = holding_registers[start_address + i];
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800140a:	4413      	add	r3, r2
 800140c:	4a5d      	ldr	r2, [pc, #372]	@ (8001584 <Process_Modbus_Frame+0x240>)
 800140e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001412:	817b      	strh	r3, [r7, #10]
	        reply[3 + 2*i] = (val >> 8) & 0xFF;
 8001414:	897b      	ldrh	r3, [r7, #10]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b29a      	uxth	r2, r3
 800141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	3303      	adds	r3, #3
 8001420:	b2d1      	uxtb	r1, r2
 8001422:	4a57      	ldr	r2, [pc, #348]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 8001424:	54d1      	strb	r1, [r2, r3]
	        reply[4 + 2*i] = val & 0xFF;
 8001426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001428:	3302      	adds	r3, #2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	897a      	ldrh	r2, [r7, #10]
 800142e:	b2d1      	uxtb	r1, r2
 8001430:	4a53      	ldr	r2, [pc, #332]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 8001432:	54d1      	strb	r1, [r2, r3]
	    for (int i = 0; i < register_count; i++) {	 // takes value from holding register and puts it into response frame
 8001434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001436:	3301      	adds	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800143a:	4b50      	ldr	r3, [pc, #320]	@ (800157c <Process_Modbus_Frame+0x238>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001442:	4293      	cmp	r3, r2
 8001444:	dbdf      	blt.n	8001406 <Process_Modbus_Frame+0xc2>
	    }

	    uint16_t crc = Modbus_CRC16(reply, 3 + 2*register_count); // calculates the crc from response data and puts it into response frame
 8001446:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <Process_Modbus_Frame+0x238>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3303      	adds	r3, #3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	484a      	ldr	r0, [pc, #296]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 8001458:	f7ff ff38 	bl	80012cc <Modbus_CRC16>
 800145c:	4603      	mov	r3, r0
 800145e:	81bb      	strh	r3, [r7, #12]
	    reply[3 + 2*register_count] = crc & 0xFF;
 8001460:	4b46      	ldr	r3, [pc, #280]	@ (800157c <Process_Modbus_Frame+0x238>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	3303      	adds	r3, #3
 8001468:	89ba      	ldrh	r2, [r7, #12]
 800146a:	b2d1      	uxtb	r1, r2
 800146c:	4a44      	ldr	r2, [pc, #272]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 800146e:	54d1      	strb	r1, [r2, r3]
	    reply[4 + 2*register_count] = (crc >> 8) & 0xFF;
 8001470:	89bb      	ldrh	r3, [r7, #12]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <Process_Modbus_Frame+0x238>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	b2d1      	uxtb	r1, r2
 8001480:	4a3f      	ldr	r2, [pc, #252]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 8001482:	54d1      	strb	r1, [r2, r3]

	    HAL_UART_Transmit_IT(&huart2, reply, 5 + 2*register_count); // transmits response
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <Process_Modbus_Frame+0x238>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	b29b      	uxth	r3, r3
 800148c:	3305      	adds	r3, #5
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	493b      	ldr	r1, [pc, #236]	@ (8001580 <Process_Modbus_Frame+0x23c>)
 8001494:	483c      	ldr	r0, [pc, #240]	@ (8001588 <Process_Modbus_Frame+0x244>)
 8001496:	f003 fac8 	bl	8004a2a <HAL_UART_Transmit_IT>
 800149a:	e103      	b.n	80016a4 <Process_Modbus_Frame+0x360>

	}

	else if (function_code == WRITE_SINGLE_REGISTER){
 800149c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d144      	bne.n	800152e <Process_Modbus_Frame+0x1ea>
		uint16_t received_crc =  modbus_frame[6] | (modbus_frame[7] << 8);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3306      	adds	r3, #6
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3307      	adds	r3, #7
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	833b      	strh	r3, [r7, #24]
		uint16_t calculated_crc = Modbus_CRC16(modbus_frame, 6);
 80014be:	2106      	movs	r1, #6
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff03 	bl	80012cc <Modbus_CRC16>
 80014c6:	4603      	mov	r3, r0
 80014c8:	82fb      	strh	r3, [r7, #22]


		if (received_crc != calculated_crc) return;
 80014ca:	8b3a      	ldrh	r2, [r7, #24]
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	f040 80e1 	bne.w	8001696 <Process_Modbus_Frame+0x352>
		if (slave_address != 0x01) return;
 80014d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 80de 	bne.w	800169a <Process_Modbus_Frame+0x356>


		uint16_t start_address = (modbus_frame[2] << 8) | modbus_frame[3];
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3302      	adds	r3, #2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3303      	adds	r3, #3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	82bb      	strh	r3, [r7, #20]
		values[0] = (modbus_frame[4] << 8) | modbus_frame[5];  // stores the data in buffer values
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3304      	adds	r3, #4
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3305      	adds	r3, #5
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <Process_Modbus_Frame+0x248>)
 8001514:	801a      	strh	r2, [r3, #0]
		holding_registers[start_address] = values[0];
 8001516:	8abb      	ldrh	r3, [r7, #20]
 8001518:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <Process_Modbus_Frame+0x248>)
 800151a:	8811      	ldrh	r1, [r2, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <Process_Modbus_Frame+0x240>)
 800151e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_UART_Transmit_IT(&huart2, modbus_frame, 8);  // transmits back the request frame as the response frame
 8001522:	2208      	movs	r2, #8
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <Process_Modbus_Frame+0x244>)
 8001528:	f003 fa7f 	bl	8004a2a <HAL_UART_Transmit_IT>
 800152c:	e0ba      	b.n	80016a4 <Process_Modbus_Frame+0x360>
	}

	else if (function_code == WRITE_MULTIPLE_REGISTERS){
 800152e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001532:	2b10      	cmp	r3, #16
 8001534:	f040 80b6 	bne.w	80016a4 <Process_Modbus_Frame+0x360>

		uint16_t start_address = (modbus_frame[2] << 8) | modbus_frame[3];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b21b      	sxth	r3, r3
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3303      	adds	r3, #3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t register_count = (modbus_frame[4] << 8) | modbus_frame[5];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b21b      	sxth	r3, r3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3305      	adds	r3, #5
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	847b      	strh	r3, [r7, #34]	@ 0x22

		uint16_t byte_count = modbus_frame[6];
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3306      	adds	r3, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	843b      	strh	r3, [r7, #32]

		for (int i=0; i<register_count; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001578:	e030      	b.n	80015dc <Process_Modbus_Frame+0x298>
 800157a:	bf00      	nop
 800157c:	2000043c 	.word	0x2000043c
 8001580:	20000310 	.word	0x20000310
 8001584:	20000240 	.word	0x20000240
 8001588:	200001d0 	.word	0x200001d0
 800158c:	20000374 	.word	0x20000374
			values[i] = (modbus_frame[7+2*i] << 8) | modbus_frame[8+2*i];  // stores each of the 16 bit data in values array
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	3307      	adds	r3, #7
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a6:	3304      	adds	r3, #4
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	440b      	add	r3, r1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	b299      	uxth	r1, r3
 80015ba:	4a3c      	ldr	r2, [pc, #240]	@ (80016ac <Process_Modbus_Frame+0x368>)
 80015bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			holding_registers[start_address + i] = values[i];
 80015c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c6:	4413      	add	r3, r2
 80015c8:	4938      	ldr	r1, [pc, #224]	@ (80016ac <Process_Modbus_Frame+0x368>)
 80015ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015cc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015d0:	4a37      	ldr	r2, [pc, #220]	@ (80016b0 <Process_Modbus_Frame+0x36c>)
 80015d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<register_count; i++){
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	3301      	adds	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbd5      	blt.n	8001590 <Process_Modbus_Frame+0x24c>
		}

		uint16_t calculated_crc = Modbus_CRC16(modbus_frame, 7+byte_count);
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	3307      	adds	r3, #7
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe6c 	bl	80012cc <Modbus_CRC16>
 80015f4:	4603      	mov	r3, r0
 80015f6:	83fb      	strh	r3, [r7, #30]
		uint16_t received_crc =  modbus_frame[7+byte_count] | (modbus_frame[8+byte_count] << 8);
 80015f8:	8c3b      	ldrh	r3, [r7, #32]
 80015fa:	3307      	adds	r3, #7
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b21a      	sxth	r2, r3
 8001606:	8c3b      	ldrh	r3, [r7, #32]
 8001608:	3308      	adds	r3, #8
 800160a:	4619      	mov	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	440b      	add	r3, r1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b21b      	sxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	83bb      	strh	r3, [r7, #28]
		if (received_crc != calculated_crc) return;
 800161e:	8bba      	ldrh	r2, [r7, #28]
 8001620:	8bfb      	ldrh	r3, [r7, #30]
 8001622:	429a      	cmp	r2, r3
 8001624:	d13b      	bne.n	800169e <Process_Modbus_Frame+0x35a>
		if (slave_address != 0x01) return;
 8001626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800162a:	2b01      	cmp	r3, #1
 800162c:	d139      	bne.n	80016a2 <Process_Modbus_Frame+0x35e>


		reply[0] = slave_address;
 800162e:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001634:	7013      	strb	r3, [r2, #0]
		reply[1] = function_code;
 8001636:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800163c:	7053      	strb	r3, [r2, #1]
		reply[2] = modbus_frame[2];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	789a      	ldrb	r2, [r3, #2]
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001644:	709a      	strb	r2, [r3, #2]
		reply[3] = modbus_frame[3];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	78da      	ldrb	r2, [r3, #3]
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 800164c:	70da      	strb	r2, [r3, #3]
		reply[4] = modbus_frame[4];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	791a      	ldrb	r2, [r3, #4]
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001654:	711a      	strb	r2, [r3, #4]
		reply[5] = modbus_frame[5];
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	795a      	ldrb	r2, [r3, #5]
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 800165c:	715a      	strb	r2, [r3, #5]

		uint16_t crc = Modbus_CRC16(reply, 6);
 800165e:	2106      	movs	r1, #6
 8001660:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001662:	f7ff fe33 	bl	80012cc <Modbus_CRC16>
 8001666:	4603      	mov	r3, r0
 8001668:	837b      	strh	r3, [r7, #26]
	    reply[6] = crc & 0xFF;
 800166a:	8b7b      	ldrh	r3, [r7, #26]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001670:	719a      	strb	r2, [r3, #6]
	    reply[7] = (crc >> 8) & 0xFF;
 8001672:	8b7b      	ldrh	r3, [r7, #26]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 800167c:	71da      	strb	r2, [r3, #7]

	    HAL_UART_Transmit_IT(&huart2, reply, 8); // transmits response
 800167e:	2208      	movs	r2, #8
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <Process_Modbus_Frame+0x370>)
 8001682:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <Process_Modbus_Frame+0x374>)
 8001684:	f003 f9d1 	bl	8004a2a <HAL_UART_Transmit_IT>
 8001688:	e00c      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (received_crc != calculated_crc) return;
 800168a:	bf00      	nop
 800168c:	e00a      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (slave_address != 0x01) return;
 800168e:	bf00      	nop
 8001690:	e008      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (register_count >10) return;
 8001692:	bf00      	nop
 8001694:	e006      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (received_crc != calculated_crc) return;
 8001696:	bf00      	nop
 8001698:	e004      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (slave_address != 0x01) return;
 800169a:	bf00      	nop
 800169c:	e002      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (received_crc != calculated_crc) return;
 800169e:	bf00      	nop
 80016a0:	e000      	b.n	80016a4 <Process_Modbus_Frame+0x360>
		if (slave_address != 0x01) return;
 80016a2:	bf00      	nop
	}
}
 80016a4:	3730      	adds	r7, #48	@ 0x30
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000374 	.word	0x20000374
 80016b0:	20000240 	.word	0x20000240
 80016b4:	20000310 	.word	0x20000310
 80016b8:	200001d0 	.word	0x200001d0

080016bc <HAL_GPIO_EXTI_Callback>:
 * @brief Callback function to handle GPIO external interrupts of PIR_1, PIR_2 and Switch
 * @param GPIO_Pin Specifies the pin getting the interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIR_1_Pin){
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d109      	bne.n	80016e0 <HAL_GPIO_EXTI_Callback+0x24>
		pir_1_int_count++;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_GPIO_EXTI_Callback+0x54>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <HAL_GPIO_EXTI_Callback+0x54>)
 80016d4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 80016d6:	2108      	movs	r1, #8
 80016d8:	480e      	ldr	r0, [pc, #56]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x58>)
 80016da:	f000 fe7a 	bl	80023d2 <HAL_GPIO_TogglePin>
	}

	else if(GPIO_Pin == switch_Pin){
		switch_flag = 0;
	}
}
 80016de:	e012      	b.n	8001706 <HAL_GPIO_EXTI_Callback+0x4a>
	else if (GPIO_Pin == PIR_2_Pin) {
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d109      	bne.n	80016fa <HAL_GPIO_EXTI_Callback+0x3e>
		pir_2_int_count++;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016ee:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
 80016f0:	2110      	movs	r1, #16
 80016f2:	4808      	ldr	r0, [pc, #32]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x58>)
 80016f4:	f000 fe6d 	bl	80023d2 <HAL_GPIO_TogglePin>
}
 80016f8:	e005      	b.n	8001706 <HAL_GPIO_EXTI_Callback+0x4a>
	else if(GPIO_Pin == switch_Pin){
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	2b80      	cmp	r3, #128	@ 0x80
 80016fe:	d102      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x4a>
		switch_flag = 0;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_GPIO_EXTI_Callback+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000440 	.word	0x20000440
 8001714:	40020c00 	.word	0x40020c00
 8001718:	20000444 	.word	0x20000444
 800171c:	20000000 	.word	0x20000000

08001720 <get_pir_state>:

States get_pir_state (void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	 if ((g_time - time_check) < PIR_MONITOR_INTERVAL)
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <get_pir_state+0xd8>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <get_pir_state+0xdc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001732:	d253      	bcs.n	80017dc <get_pir_state+0xbc>
	 {
		 // Case 1: Both PIRs active
		 if ((pir_1_int_count > INTERRUPT_THRESHOLD_2) && (pir_2_int_count > INTERRUPT_THRESHOLD_2)){
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <get_pir_state+0xe0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	dd17      	ble.n	800176c <get_pir_state+0x4c>
 800173c:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <get_pir_state+0xe4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	dd13      	ble.n	800176c <get_pir_state+0x4c>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2101      	movs	r1, #1
 8001748:	482f      	ldr	r0, [pc, #188]	@ (8001808 <get_pir_state+0xe8>)
 800174a:	f000 fe29 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2180      	movs	r1, #128	@ 0x80
 8001752:	482d      	ldr	r0, [pc, #180]	@ (8001808 <get_pir_state+0xe8>)
 8001754:	f000 fe24 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175e:	482a      	ldr	r0, [pc, #168]	@ (8001808 <get_pir_state+0xe8>)
 8001760:	f000 fe1e 	bl	80023a0 <HAL_GPIO_WritePin>
			 pir_status = ACTIVE;
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <get_pir_state+0xec>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e041      	b.n	80017f0 <get_pir_state+0xd0>
			 // LED-Blue ON
		 }
		 // Case 2: One PIR abnormal -> Alert mode
		 else if ((pir_1_int_count <= INTERRUPT_THRESHOLD) && (pir_2_int_count > INTERRUPT_THRESHOLD)){
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <get_pir_state+0xe0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	dc17      	bgt.n	80017a4 <get_pir_state+0x84>
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <get_pir_state+0xe4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	dd13      	ble.n	80017a4 <get_pir_state+0x84>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2101      	movs	r1, #1
 8001780:	4821      	ldr	r0, [pc, #132]	@ (8001808 <get_pir_state+0xe8>)
 8001782:	f000 fe0d 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	481f      	ldr	r0, [pc, #124]	@ (8001808 <get_pir_state+0xe8>)
 800178c:	f000 fe08 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001796:	481c      	ldr	r0, [pc, #112]	@ (8001808 <get_pir_state+0xe8>)
 8001798:	f000 fe02 	bl	80023a0 <HAL_GPIO_WritePin>
			 pir_status = ALERT;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <get_pir_state+0xec>)
 800179e:	2202      	movs	r2, #2
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e025      	b.n	80017f0 <get_pir_state+0xd0>
			 // LED-Red ON
		 }
		 // Case 3: Both inactive -> Idle mode
		 else if ((pir_1_int_count <= INTERRUPT_THRESHOLD) && (pir_2_int_count <= INTERRUPT_THRESHOLD)){
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <get_pir_state+0xe0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	dc21      	bgt.n	80017f0 <get_pir_state+0xd0>
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <get_pir_state+0xe4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	dc1d      	bgt.n	80017f0 <get_pir_state+0xd0>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2101      	movs	r1, #1
 80017b8:	4813      	ldr	r0, [pc, #76]	@ (8001808 <get_pir_state+0xe8>)
 80017ba:	f000 fdf1 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	4811      	ldr	r0, [pc, #68]	@ (8001808 <get_pir_state+0xe8>)
 80017c4:	f000 fdec 	bl	80023a0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ce:	480e      	ldr	r0, [pc, #56]	@ (8001808 <get_pir_state+0xe8>)
 80017d0:	f000 fde6 	bl	80023a0 <HAL_GPIO_WritePin>
			 pir_status = IDLE;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <get_pir_state+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e009      	b.n	80017f0 <get_pir_state+0xd0>
	 }

	 else
	 {
		 // reset counters and time stamps for each interval check
		 time_check = g_time;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <get_pir_state+0xd8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <get_pir_state+0xdc>)
 80017e2:	6013      	str	r3, [r2, #0]
		 pir_1_int_count = 0;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <get_pir_state+0xe0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		 pir_2_int_count = 0;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <get_pir_state+0xe4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
//		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//		 pir_status = IDLE;
		 // LED-Green ON
	 }

	 return pir_status;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <get_pir_state+0xec>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000218 	.word	0x20000218
 80017fc:	2000023c 	.word	0x2000023c
 8001800:	20000440 	.word	0x20000440
 8001804:	20000444 	.word	0x20000444
 8001808:	40020400 	.word	0x40020400
 800180c:	20000448 	.word	0x20000448

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_MspInit+0x4c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001824:	6453      	str	r3, [r2, #68]	@ 0x44
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x4c>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <HAL_I2C_MspInit+0x84>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12c      	bne.n	80018dc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800189e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b0:	2304      	movs	r3, #4
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	480c      	ldr	r0, [pc, #48]	@ (80018ec <HAL_I2C_MspInit+0x8c>)
 80018bc:	f000 fbdc 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 80018ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_I2C_MspInit+0x88>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	@ 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40005400 	.word	0x40005400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020400 	.word	0x40020400

080018f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <HAL_TIM_Base_MspInit+0x48>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d115      	bne.n	800192e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_TIM_Base_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2036      	movs	r0, #54	@ 0x36
 8001924:	f000 fadf 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001928:	2036      	movs	r0, #54	@ 0x36
 800192a:	f000 faf8 	bl	8001f1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40001000 	.word	0x40001000
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <HAL_UART_MspInit+0x108>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d135      	bne.n	80019ce <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 800196c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800199a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019ac:	2308      	movs	r3, #8
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4826      	ldr	r0, [pc, #152]	@ (8001a50 <HAL_UART_MspInit+0x110>)
 80019b8:	f000 fb5e 	bl	8002078 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2034      	movs	r0, #52	@ 0x34
 80019c2:	f000 fa90 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019c6:	2034      	movs	r0, #52	@ 0x34
 80019c8:	f000 faa9 	bl	8001f1e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80019cc:	e038      	b.n	8001a40 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a20      	ldr	r2, [pc, #128]	@ (8001a54 <HAL_UART_MspInit+0x114>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d133      	bne.n	8001a40 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 80019e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_UART_MspInit+0x10c>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a10:	2360      	movs	r3, #96	@ 0x60
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a20:	2307      	movs	r3, #7
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <HAL_UART_MspInit+0x118>)
 8001a2c:	f000 fb24 	bl	8002078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2026      	movs	r0, #38	@ 0x26
 8001a36:	f000 fa56 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a3a:	2026      	movs	r0, #38	@ 0x26
 8001a3c:	f000 fa6f 	bl	8001f1e <HAL_NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	@ 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40004c00 	.word	0x40004c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40004400 	.word	0x40004400
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <NMI_Handler+0x4>

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <MemManage_Handler+0x4>

08001a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f000 f8f9 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_1_Pin);
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f000 fca2 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_2_Pin);
 8001acc:	2008      	movs	r0, #8
 8001ace:	f000 fc9b 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(switch_Pin);
 8001ada:	2080      	movs	r0, #128	@ 0x80
 8001adc:	f000 fc94 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <USART2_IRQHandler+0x10>)
 8001aea:	f002 fff9 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200001d0 	.word	0x200001d0

08001af8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <UART4_IRQHandler+0x10>)
 8001afe:	f002 ffef 	bl	8004ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000188 	.word	0x20000188

08001b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <TIM6_DAC_IRQHandler+0x10>)
 8001b12:	f002 fc61 	bl	80043d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000140 	.word	0x20000140

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f003 ff98 	bl	8005a84 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20020000 	.word	0x20020000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	2000044c 	.word	0x2000044c
 8001b88:	200005a0 	.word	0x200005a0

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bb4:	f7ff ffea 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	@ (8001bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f003 ff57 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be2:	f7ff f83f 	bl	8000c64 <main>
  bx  lr    
 8001be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001bf4:	0800648c 	.word	0x0800648c
  ldr r2, =_sbss
 8001bf8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bfc:	2000059c 	.word	0x2000059c

08001c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <HAL_Init+0x40>)
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <HAL_Init+0x40>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <HAL_Init+0x40>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f94f 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fdea 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f967 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f92f 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	@ (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	20000450 	.word	0x20000450

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000450 	.word	0x20000450

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	@ (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff feb6 	bl	8001cd0 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d008      	beq.n	8001f84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e052      	b.n	800202a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0216 	bic.w	r2, r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <HAL_DMA_Abort+0x62>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0208 	bic.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd4:	e013      	b.n	8001ffe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd6:	f7ff fe7b 	bl	8001cd0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d90c      	bls.n	8001ffe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e015      	b.n	800202a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e4      	bne.n	8001fd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	223f      	movs	r2, #63	@ 0x3f
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e00c      	b.n	800206a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2205      	movs	r2, #5
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e165      	b.n	8002360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8154 	bne.w	800235a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80ae 	beq.w	800235a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a5c      	ldr	r2, [pc, #368]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a58      	ldr	r2, [pc, #352]	@ (800237c <HAL_GPIO_Init+0x304>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	@ (8002380 <HAL_GPIO_Init+0x308>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x21a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	@ (8002384 <HAL_GPIO_Init+0x30c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x216>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_GPIO_Init+0x310>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x212>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4c      	ldr	r2, [pc, #304]	@ (800238c <HAL_GPIO_Init+0x314>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4b      	ldr	r2, [pc, #300]	@ (8002390 <HAL_GPIO_Init+0x318>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x20a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	@ (8002394 <HAL_GPIO_Init+0x31c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x206>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	@ (8002398 <HAL_GPIO_Init+0x320>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x202>
 8002276:	2306      	movs	r3, #6
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800227a:	2307      	movs	r3, #7
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a31      	ldr	r2, [pc, #196]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a26      	ldr	r2, [pc, #152]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_GPIO_Init+0x324>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a11      	ldr	r2, [pc, #68]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f ae96 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40021800 	.word	0x40021800
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	041a      	lsls	r2, r3, #16
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	400b      	ands	r3, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f948 	bl	80016bc <HAL_GPIO_EXTI_Callback>
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e12b      	b.n	80026a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff f9fe 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	@ 0x24
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800249a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800249c:	f001 f9e6 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 80024a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a81      	ldr	r2, [pc, #516]	@ (80026ac <HAL_I2C_Init+0x274>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d807      	bhi.n	80024bc <HAL_I2C_Init+0x84>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a80      	ldr	r2, [pc, #512]	@ (80026b0 <HAL_I2C_Init+0x278>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	bf94      	ite	ls
 80024b4:	2301      	movls	r3, #1
 80024b6:	2300      	movhi	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e006      	b.n	80024ca <HAL_I2C_Init+0x92>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a7d      	ldr	r2, [pc, #500]	@ (80026b4 <HAL_I2C_Init+0x27c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0e7      	b.n	80026a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a78      	ldr	r2, [pc, #480]	@ (80026b8 <HAL_I2C_Init+0x280>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0c9b      	lsrs	r3, r3, #18
 80024dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a6a      	ldr	r2, [pc, #424]	@ (80026ac <HAL_I2C_Init+0x274>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d802      	bhi.n	800250c <HAL_I2C_Init+0xd4>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	e009      	b.n	8002520 <HAL_I2C_Init+0xe8>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	4a69      	ldr	r2, [pc, #420]	@ (80026bc <HAL_I2C_Init+0x284>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	3301      	adds	r3, #1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002532:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	495c      	ldr	r1, [pc, #368]	@ (80026ac <HAL_I2C_Init+0x274>)
 800253c:	428b      	cmp	r3, r1
 800253e:	d819      	bhi.n	8002574 <HAL_I2C_Init+0x13c>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e59      	subs	r1, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fbb1 f3f3 	udiv	r3, r1, r3
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002554:	400b      	ands	r3, r1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_I2C_Init+0x138>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e59      	subs	r1, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fbb1 f3f3 	udiv	r3, r1, r3
 8002568:	3301      	adds	r3, #1
 800256a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256e:	e051      	b.n	8002614 <HAL_I2C_Init+0x1dc>
 8002570:	2304      	movs	r3, #4
 8002572:	e04f      	b.n	8002614 <HAL_I2C_Init+0x1dc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d111      	bne.n	80025a0 <HAL_I2C_Init+0x168>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e58      	subs	r0, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e012      	b.n	80025c6 <HAL_I2C_Init+0x18e>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e58      	subs	r0, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	0099      	lsls	r1, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Init+0x196>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e022      	b.n	8002614 <HAL_I2C_Init+0x1dc>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10e      	bne.n	80025f4 <HAL_I2C_Init+0x1bc>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e58      	subs	r0, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f2:	e00f      	b.n	8002614 <HAL_I2C_Init+0x1dc>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1e58      	subs	r0, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	0099      	lsls	r1, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	fbb0 f3f3 	udiv	r3, r0, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	6809      	ldr	r1, [r1, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6911      	ldr	r1, [r2, #16]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	000186a0 	.word	0x000186a0
 80026b0:	001e847f 	.word	0x001e847f
 80026b4:	003d08ff 	.word	0x003d08ff
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	10624dd3 	.word	0x10624dd3

080026c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
 80026d0:	4613      	mov	r3, r2
 80026d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff fafc 	bl	8001cd0 <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	f040 80e0 	bne.w	80028a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2319      	movs	r3, #25
 80026ee:	2201      	movs	r2, #1
 80026f0:	4970      	ldr	r1, [pc, #448]	@ (80028b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fd92 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	e0d3      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2C_Master_Transmit+0x50>
 800270c:	2302      	movs	r3, #2
 800270e:	e0cc      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d007      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2221      	movs	r2, #33	@ 0x21
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2210      	movs	r2, #16
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	893a      	ldrh	r2, [r7, #8]
 8002766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a50      	ldr	r2, [pc, #320]	@ (80028b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002778:	8979      	ldrh	r1, [r7, #10]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fbfc 	bl	8002f7c <I2C_MasterRequestWrite>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e08d      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027a4:	e066      	b.n	8002874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fe50 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06b      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11b      	bne.n	8002848 <HAL_I2C_Master_Transmit+0x188>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	6a39      	ldr	r1, [r7, #32]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fe47 	bl	80034e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	2b04      	cmp	r3, #4
 800285e:	d107      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e01a      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d194      	bne.n	80027a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	00100002 	.word	0x00100002
 80028b8:	ffff0000 	.word	0xffff0000

080028bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	@ 0x30
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff f9fe 	bl	8001cd0 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 8217 	bne.w	8002d12 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	497c      	ldr	r1, [pc, #496]	@ (8002ae0 <HAL_I2C_Master_Receive+0x224>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc94 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e20a      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Receive+0x50>
 8002908:	2302      	movs	r3, #2
 800290a:	e203      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2222      	movs	r2, #34	@ 0x22
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae4 <HAL_I2C_Master_Receive+0x228>)
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb80 	bl	8003080 <I2C_MasterRequestRead>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1c4      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e198      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d11b      	bne.n	80029fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e178      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11b      	bne.n	8002a3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	e158      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a60:	e144      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	f200 80f1 	bhi.w	8002c4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d123      	bne.n	8002abc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fd79 	bl	8003570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e145      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aba:	e117      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d14e      	bne.n	8002b62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	2200      	movs	r2, #0
 8002acc:	4906      	ldr	r1, [pc, #24]	@ (8002ae8 <HAL_I2C_Master_Receive+0x22c>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fba4 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e11a      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
 8002ade:	bf00      	nop
 8002ae0:	00100002 	.word	0x00100002
 8002ae4:	ffff0000 	.word	0xffff0000
 8002ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b60:	e0c4      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	496c      	ldr	r1, [pc, #432]	@ (8002d1c <HAL_I2C_Master_Receive+0x460>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fb55 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0cb      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4955      	ldr	r1, [pc, #340]	@ (8002d1c <HAL_I2C_Master_Receive+0x460>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fb27 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e09d      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c4c:	e04e      	b.n	8002cec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fc8c 	bl	8003570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e058      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d124      	bne.n	8002cec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f aeb6 	bne.w	8002a62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3728      	adds	r7, #40	@ 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	00010004 	.word	0x00010004

08002d20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7fe ffce 	bl	8001cd0 <HAL_GetTick>
 8002d34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 8111 	bne.w	8002f6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4988      	ldr	r1, [pc, #544]	@ (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fa62 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e104      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2C_IsDeviceReady+0x50>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0fd      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d007      	beq.n	8002d96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2224      	movs	r2, #36	@ 0x24
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a70      	ldr	r2, [pc, #448]	@ (8002f78 <HAL_I2C_IsDeviceReady+0x258>)
 8002db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa20 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df0:	d103      	bne.n	8002dfa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0b6      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe ff5f 	bl	8001cd0 <HAL_GetTick>
 8002e12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e42:	e025      	b.n	8002e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fe ff44 	bl	8001cd0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <HAL_I2C_IsDeviceReady+0x13a>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22a0      	movs	r2, #160	@ 0xa0
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_I2C_IsDeviceReady+0x188>
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_I2C_IsDeviceReady+0x188>
 8002ea2:	7dbb      	ldrb	r3, [r7, #22]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0cd      	beq.n	8002e44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d129      	bne.n	8002f12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	4921      	ldr	r1, [pc, #132]	@ (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f994 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e036      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e02c      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	490f      	ldr	r1, [pc, #60]	@ (8002f74 <HAL_I2C_IsDeviceReady+0x254>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f970 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e012      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f4ff af32 	bcc.w	8002dba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	00100002 	.word	0x00100002
 8002f78:	ffff0000 	.word	0xffff0000

08002f7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d006      	beq.n	8002fa6 <I2C_MasterRequestWrite+0x2a>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d003      	beq.n	8002fa6 <I2C_MasterRequestWrite+0x2a>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fa4:	d108      	bne.n	8002fb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e00b      	b.n	8002fd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d107      	bne.n	8002fd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f91d 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff6:	d103      	bne.n	8003000 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e035      	b.n	8003070 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800300c:	d108      	bne.n	8003020 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	e01b      	b.n	8003058 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	11db      	asrs	r3, r3, #7
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0306 	and.w	r3, r3, #6
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f063 030f 	orn	r3, r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	490e      	ldr	r1, [pc, #56]	@ (8003078 <I2C_MasterRequestWrite+0xfc>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f966 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e010      	b.n	8003070 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <I2C_MasterRequestWrite+0x100>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f956 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00010008 	.word	0x00010008
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	460b      	mov	r3, r1
 800308e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d006      	beq.n	80030ba <I2C_MasterRequestRead+0x3a>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d003      	beq.n	80030ba <I2C_MasterRequestRead+0x3a>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b8:	d108      	bne.n	80030cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00b      	b.n	80030e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	2b11      	cmp	r3, #17
 80030d2:	d107      	bne.n	80030e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f893 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800310a:	d103      	bne.n	8003114 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e079      	b.n	800320c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003120:	d108      	bne.n	8003134 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	e05f      	b.n	80031f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003134:	897b      	ldrh	r3, [r7, #10]
 8003136:	11db      	asrs	r3, r3, #7
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f063 030f 	orn	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4930      	ldr	r1, [pc, #192]	@ (8003214 <I2C_MasterRequestRead+0x194>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8dc 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e054      	b.n	800320c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4929      	ldr	r1, [pc, #164]	@ (8003218 <I2C_MasterRequestRead+0x198>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8cc 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e044      	b.n	800320c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f831 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ce:	d103      	bne.n	80031d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e017      	b.n	800320c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031dc:	897b      	ldrh	r3, [r7, #10]
 80031de:	11db      	asrs	r3, r3, #7
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0306 	and.w	r3, r3, #6
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f063 030e 	orn	r3, r3, #14
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4907      	ldr	r1, [pc, #28]	@ (8003218 <I2C_MasterRequestRead+0x198>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f888 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	00010008 	.word	0x00010008
 8003218:	00010002 	.word	0x00010002

0800321c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	e048      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d044      	beq.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fd4b 	bl	8001cd0 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d139      	bne.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	e00c      	b.n	800328c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d116      	bne.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e023      	b.n	8003308 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10d      	bne.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	e00c      	b.n	8003300 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	429a      	cmp	r2, r3
 8003304:	d093      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331e:	e071      	b.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332e:	d123      	bne.n	8003378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e067      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d041      	beq.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fe fca6 	bl	8001cd0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d136      	bne.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10c      	bne.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e00b      	b.n	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e021      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10c      	bne.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e00b      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f af6d 	bne.w	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	e034      	b.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8e3 	bl	800362a <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e034      	b.n	80034d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d028      	beq.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fc2b 	bl	8001cd0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11d      	bne.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b80      	cmp	r3, #128	@ 0x80
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b80      	cmp	r3, #128	@ 0x80
 80034d4:	d1c3      	bne.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f89b 	bl	800362a <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e034      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d028      	beq.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe fbe3 	bl	8001cd0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d016      	beq.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d1c3      	bne.n	80034ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800357c:	e049      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d119      	bne.n	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e030      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fb86 	bl	8001cd0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11d      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d016      	beq.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d1ae      	bne.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	d11b      	bne.n	800367a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0cc      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b68      	ldr	r3, [pc, #416]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d90c      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b65      	ldr	r3, [pc, #404]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a58      	ldr	r2, [pc, #352]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a52      	ldr	r2, [pc, #328]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d044      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d119      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d003      	beq.n	8003746 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b3f      	ldr	r3, [pc, #252]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3b      	ldr	r3, [pc, #236]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e067      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b37      	ldr	r3, [pc, #220]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4934      	ldr	r1, [pc, #208]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7fe faaa 	bl	8001cd0 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe faa6 	bl	8001cd0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e04f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2b      	ldr	r3, [pc, #172]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d20c      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b22      	ldr	r3, [pc, #136]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f855 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	490a      	ldr	r1, [pc, #40]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fa0a 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00
 8003844:	40023800 	.word	0x40023800
 8003848:	08006430 	.word	0x08006430
 800384c:	20000004 	.word	0x20000004
 8003850:	20000008 	.word	0x20000008

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a9b      	lsrs	r3, r3, #10
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	@ (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	08006440 	.word	0x08006440

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003898:	f7ff ffdc 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0b5b      	lsrs	r3, r3, #13
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	@ (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	08006440 	.word	0x08006440

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b0ae      	sub	sp, #184	@ 0xb8
 80038c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e2:	4bcb      	ldr	r3, [pc, #812]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	f200 8206 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x440>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	08003cfd 	.word	0x08003cfd
 8003900:	08003cfd 	.word	0x08003cfd
 8003904:	08003cfd 	.word	0x08003cfd
 8003908:	08003935 	.word	0x08003935
 800390c:	08003cfd 	.word	0x08003cfd
 8003910:	08003cfd 	.word	0x08003cfd
 8003914:	08003cfd 	.word	0x08003cfd
 8003918:	0800393d 	.word	0x0800393d
 800391c:	08003cfd 	.word	0x08003cfd
 8003920:	08003cfd 	.word	0x08003cfd
 8003924:	08003cfd 	.word	0x08003cfd
 8003928:	08003b2d 	.word	0x08003b2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4bb9      	ldr	r3, [pc, #740]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x358>)
 800392e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003932:	e1e7      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003934:	4bb8      	ldr	r3, [pc, #736]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800393a:	e1e3      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393c:	4bb4      	ldr	r3, [pc, #720]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003948:	4bb1      	ldr	r3, [pc, #708]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d071      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003954:	4bae      	ldr	r3, [pc, #696]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003960:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4621      	mov	r1, r4
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	6439      	str	r1, [r7, #64]	@ 0x40
 8003998:	4629      	mov	r1, r5
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80039ac:	4649      	mov	r1, r9
 80039ae:	018b      	lsls	r3, r1, #6
 80039b0:	4641      	mov	r1, r8
 80039b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b6:	4641      	mov	r1, r8
 80039b8:	018a      	lsls	r2, r1, #6
 80039ba:	4641      	mov	r1, r8
 80039bc:	1a51      	subs	r1, r2, r1
 80039be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039c0:	4649      	mov	r1, r9
 80039c2:	eb63 0301 	sbc.w	r3, r3, r1
 80039c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039d4:	4649      	mov	r1, r9
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4641      	mov	r1, r8
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4641      	mov	r1, r8
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4622      	mov	r2, r4
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ee:	462b      	mov	r3, r5
 80039f0:	460a      	mov	r2, r1
 80039f2:	eb42 0303 	adc.w	r3, r2, r3
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a04:	4629      	mov	r1, r5
 8003a06:	024b      	lsls	r3, r1, #9
 8003a08:	4621      	mov	r1, r4
 8003a0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a0e:	4621      	mov	r1, r4
 8003a10:	024a      	lsls	r2, r1, #9
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a28:	f7fc fc4a 	bl	80002c0 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a36:	e067      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4b75      	ldr	r3, [pc, #468]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a52:	2300      	movs	r3, #0
 8003a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4621      	mov	r1, r4
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4641      	mov	r1, r8
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4641      	mov	r1, r8
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aba:	4692      	mov	sl, r2
 8003abc:	469b      	mov	fp, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ada:	4629      	mov	r1, r5
 8003adc:	028b      	lsls	r3, r1, #10
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	028a      	lsls	r2, r1, #10
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003af0:	2200      	movs	r2, #0
 8003af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003af4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003af6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003afa:	f7fc fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4613      	mov	r3, r2
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b08:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b2a:	e0eb      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b38:	4b35      	ldr	r3, [pc, #212]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d06b      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b32      	ldr	r3, [pc, #200]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b58:	2300      	movs	r3, #0
 8003b5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b60:	4622      	mov	r2, r4
 8003b62:	462b      	mov	r3, r5
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	0159      	lsls	r1, r3, #5
 8003b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b72:	0150      	lsls	r0, r2, #5
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4621      	mov	r1, r4
 8003b7a:	1a51      	subs	r1, r2, r1
 8003b7c:	61b9      	str	r1, [r7, #24]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	eb63 0301 	sbc.w	r3, r3, r1
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b92:	4659      	mov	r1, fp
 8003b94:	018b      	lsls	r3, r1, #6
 8003b96:	4651      	mov	r1, sl
 8003b98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	018a      	lsls	r2, r1, #6
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	eb63 0901 	sbc.w	r9, r3, r1
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	eb18 0303 	adds.w	r3, r8, r3
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	462b      	mov	r3, r5
 8003bce:	eb49 0303 	adc.w	r3, r9, r3
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003be0:	4629      	mov	r1, r5
 8003be2:	024b      	lsls	r3, r1, #9
 8003be4:	4621      	mov	r1, r4
 8003be6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bea:	4621      	mov	r1, r4
 8003bec:	024a      	lsls	r2, r1, #9
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bfa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c00:	f7fc fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c0e:	e065      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x420>
 8003c10:	40023800 	.word	0x40023800
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	2200      	movs	r2, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	4611      	mov	r1, r2
 8003c28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c2e:	2300      	movs	r3, #0
 8003c30:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c36:	4642      	mov	r2, r8
 8003c38:	464b      	mov	r3, r9
 8003c3a:	f04f 0000 	mov.w	r0, #0
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	0159      	lsls	r1, r3, #5
 8003c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c48:	0150      	lsls	r0, r2, #5
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4641      	mov	r1, r8
 8003c50:	1a51      	subs	r1, r2, r1
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	4649      	mov	r1, r9
 8003c56:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c68:	4659      	mov	r1, fp
 8003c6a:	018b      	lsls	r3, r1, #6
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c72:	4651      	mov	r1, sl
 8003c74:	018a      	lsls	r2, r1, #6
 8003c76:	4651      	mov	r1, sl
 8003c78:	1a54      	subs	r4, r2, r1
 8003c7a:	4659      	mov	r1, fp
 8003c7c:	eb63 0501 	sbc.w	r5, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003cca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cce:	f7fc faf7 	bl	80002c0 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0f1b      	lsrs	r3, r3, #28
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	37b8      	adds	r7, #184	@ 0xb8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400

08003d1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e28d      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8083 	beq.w	8003e42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d3c:	4b94      	ldr	r3, [pc, #592]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d019      	beq.n	8003d7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d48:	4b91      	ldr	r3, [pc, #580]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d54:	4b8e      	ldr	r3, [pc, #568]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b8b      	ldr	r3, [pc, #556]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b88      	ldr	r3, [pc, #544]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b84      	ldr	r3, [pc, #528]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x124>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e25a      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x90>
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7b      	ldr	r2, [pc, #492]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xcc>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xb4>
 8003db6:	4b76      	ldr	r3, [pc, #472]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b73      	ldr	r3, [pc, #460]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xcc>
 8003dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd ff6e 	bl	8001cd0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fd ff6a 	bl	8001cd0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	@ 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e21f      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b61      	ldr	r3, [pc, #388]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xdc>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd ff5a 	bl	8001cd0 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fd ff56 	bl	8001cd0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e20b      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b57      	ldr	r3, [pc, #348]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x104>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d06f      	beq.n	8003f2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e4e:	4b50      	ldr	r3, [pc, #320]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d017      	beq.n	8003e8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e66:	4b4a      	ldr	r3, [pc, #296]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b47      	ldr	r3, [pc, #284]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7e:	4b44      	ldr	r3, [pc, #272]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b41      	ldr	r3, [pc, #260]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x186>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1d3      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4937      	ldr	r1, [pc, #220]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e03a      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_OscConfig+0x278>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fd ff03 	bl	8001cd0 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fd feff 	bl	8001cd0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1b4      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4925      	ldr	r1, [pc, #148]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <HAL_RCC_OscConfig+0x278>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fee2 	bl	8001cd0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd fede 	bl	8001cd0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e193      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d036      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fd fec2 	bl	8001cd0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fd febe 	bl	8001cd0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e173      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x234>
 8003f6e:	e01b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f70:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd feab 	bl	8001cd0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	e00e      	b.n	8003f9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fd fea7 	bl	8001cd0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d907      	bls.n	8003f9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e15c      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	42470000 	.word	0x42470000
 8003f98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ea      	bne.n	8003f7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8097 	beq.w	80040e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b83      	ldr	r3, [pc, #524]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b7f      	ldr	r3, [pc, #508]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	4a7e      	ldr	r2, [pc, #504]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <HAL_RCC_OscConfig+0x4b0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4b76      	ldr	r3, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x4b0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a75      	ldr	r2, [pc, #468]	@ (80041cc <HAL_RCC_OscConfig+0x4b0>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fe67 	bl	8001cd0 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7fd fe63 	bl	8001cd0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e118      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b6c      	ldr	r3, [pc, #432]	@ (80041cc <HAL_RCC_OscConfig+0x4b0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x31e>
 800402c:	4b66      	ldr	r3, [pc, #408]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4a65      	ldr	r2, [pc, #404]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	@ 0x70
 8004038:	e01c      	b.n	8004074 <HAL_RCC_OscConfig+0x358>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b05      	cmp	r3, #5
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x340>
 8004042:	4b61      	ldr	r3, [pc, #388]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	4a60      	ldr	r2, [pc, #384]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70
 800404e:	4b5e      	ldr	r3, [pc, #376]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	4a5d      	ldr	r2, [pc, #372]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	@ 0x70
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0x358>
 800405c:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	4a59      	ldr	r2, [pc, #356]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	6713      	str	r3, [r2, #112]	@ 0x70
 8004068:	4b57      	ldr	r3, [pc, #348]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a56      	ldr	r2, [pc, #344]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800406e:	f023 0304 	bic.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd fe28 	bl	8001cd0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd fe24 	bl	8001cd0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0d7      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ee      	beq.n	8004084 <HAL_RCC_OscConfig+0x368>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd fe12 	bl	8001cd0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd fe0e 	bl	8001cd0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0c1      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	4b40      	ldr	r3, [pc, #256]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ee      	bne.n	80040b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	4a3a      	ldr	r2, [pc, #232]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80ad 	beq.w	8004248 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ee:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d060      	beq.n	80041bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d145      	bne.n	800418e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <HAL_RCC_OscConfig+0x4b4>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fde2 	bl	8001cd0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd fdde 	bl	8001cd0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e093      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	3b01      	subs	r3, #1
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	491b      	ldr	r1, [pc, #108]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004160:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x4b4>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd fdb3 	bl	8001cd0 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fd fdaf 	bl	8001cd0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e064      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x452>
 800418c:	e05c      	b.n	8004248 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <HAL_RCC_OscConfig+0x4b4>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd fd9c 	bl	8001cd0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd fd98 	bl	8001cd0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e04d      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x480>
 80041ba:	e045      	b.n	8004248 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e040      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40007000 	.word	0x40007000
 80041d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004254 <HAL_RCC_OscConfig+0x538>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d030      	beq.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d129      	bne.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d122      	bne.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800420a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800420c:	4293      	cmp	r3, r2
 800420e:	d119      	bne.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d10f      	bne.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d107      	bne.n	8004244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e041      	b.n	80042ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fb36 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 f9b6 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d001      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e04e      	b.n	80043ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <HAL_TIM_Base_Start_IT+0xc4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433a:	d01d      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d111      	bne.n	800439c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d010      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e007      	b.n	80043ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	40001800 	.word	0x40001800

080043d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0202 	mvn.w	r2, #2
 800440c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f8d2 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8c4 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8d5 	bl	80045e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0204 	mvn.w	r2, #4
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8ac 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f89e 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8af 	bl	80045e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0208 	mvn.w	r2, #8
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2204      	movs	r2, #4
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f886 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f878 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f889 	bl	80045e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0210 	mvn.w	r2, #16
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2208      	movs	r2, #8
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f860 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f852 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f863 	bl	80045e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0201 	mvn.w	r2, #1
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fb22 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f97c 	bl	8004860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f834 	bl	80045f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0220 	mvn.w	r2, #32
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f94e 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a43      	ldr	r2, [pc, #268]	@ (8004728 <TIM_Base_SetConfig+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004626:	d00f      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a40      	ldr	r2, [pc, #256]	@ (800472c <TIM_Base_SetConfig+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3f      	ldr	r2, [pc, #252]	@ (8004730 <TIM_Base_SetConfig+0x128>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3e      	ldr	r2, [pc, #248]	@ (8004734 <TIM_Base_SetConfig+0x12c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3d      	ldr	r2, [pc, #244]	@ (8004738 <TIM_Base_SetConfig+0x130>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d108      	bne.n	800465a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a32      	ldr	r2, [pc, #200]	@ (8004728 <TIM_Base_SetConfig+0x120>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d02b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004668:	d027      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2f      	ldr	r2, [pc, #188]	@ (800472c <TIM_Base_SetConfig+0x124>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d023      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2e      	ldr	r2, [pc, #184]	@ (8004730 <TIM_Base_SetConfig+0x128>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2d      	ldr	r2, [pc, #180]	@ (8004734 <TIM_Base_SetConfig+0x12c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2c      	ldr	r2, [pc, #176]	@ (8004738 <TIM_Base_SetConfig+0x130>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d017      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <TIM_Base_SetConfig+0x134>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2a      	ldr	r2, [pc, #168]	@ (8004740 <TIM_Base_SetConfig+0x138>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a29      	ldr	r2, [pc, #164]	@ (8004744 <TIM_Base_SetConfig+0x13c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a28      	ldr	r2, [pc, #160]	@ (8004748 <TIM_Base_SetConfig+0x140>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a27      	ldr	r2, [pc, #156]	@ (800474c <TIM_Base_SetConfig+0x144>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a26      	ldr	r2, [pc, #152]	@ (8004750 <TIM_Base_SetConfig+0x148>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004728 <TIM_Base_SetConfig+0x120>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0xf2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <TIM_Base_SetConfig+0x130>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d103      	bne.n	8004702 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40010400 	.word	0x40010400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800
 8004748:	40001800 	.word	0x40001800
 800474c:	40001c00 	.word	0x40001c00
 8004750:	40002000 	.word	0x40002000

08004754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e05a      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a21      	ldr	r2, [pc, #132]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b8:	d01d      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10c      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40010400 	.word	0x40010400
 8004844:	40014000 	.word	0x40014000
 8004848:	40001800 	.word	0x40001800

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e042      	b.n	800490c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f850 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	@ 0x24
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fe09 	bl	80054d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b20      	cmp	r3, #32
 8004932:	d175      	bne.n	8004a20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_UART_Transmit+0x2c>
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e06e      	b.n	8004a22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2221      	movs	r2, #33	@ 0x21
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004952:	f7fd f9bd 	bl	8001cd0 <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496c:	d108      	bne.n	8004980 <HAL_UART_Transmit+0x6c>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e003      	b.n	8004988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004988:	e02e      	b.n	80049e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb6d 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e03a      	b.n	8004a22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10b      	bne.n	80049ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	3302      	adds	r3, #2
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	e007      	b.n	80049da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1cb      	bne.n	800498a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2140      	movs	r1, #64	@ 0x40
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fb39 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e006      	b.n	8004a22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d121      	bne.n	8004a88 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Transmit_IT+0x26>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e01a      	b.n	8004a8a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	@ 0x21
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d112      	bne.n	8004ad6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Receive_IT+0x26>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e00b      	b.n	8004ad8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fb2a 	bl	8005126 <UART_Start_Receive_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e000      	b.n	8004ad8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_UART_IRQHandler+0x66>
 8004b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fc07 	bl	8005352 <UART_Receive_IT>
      return;
 8004b44:	e273      	b.n	800502e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80de 	beq.w	8004d0c <HAL_UART_IRQHandler+0x22c>
 8004b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80d1 	beq.w	8004d0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0xae>
 8004b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xd2>
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	f043 0202 	orr.w	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xf6>
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_UART_IRQHandler+0x126>
 8004be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	f043 0208 	orr.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 820a 	beq.w	8005024 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_UART_IRQHandler+0x14e>
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fb92 	bl	8005352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_UART_IRQHandler+0x17a>
 8004c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04f      	beq.n	8004cfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa9d 	bl	800519a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	d141      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1d9      	bne.n	8004c6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d013      	beq.n	8004cea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	4a8a      	ldr	r2, [pc, #552]	@ (8004ef0 <HAL_UART_IRQHandler+0x410>)
 8004cc8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd f9af 	bl	8002032 <HAL_DMA_Abort_IT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e00e      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9ac 	bl	8005048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e00a      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9a8 	bl	8005048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e006      	b.n	8004d08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9a4 	bl	8005048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d06:	e18d      	b.n	8005024 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	bf00      	nop
    return;
 8004d0a:	e18b      	b.n	8005024 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	f040 8167 	bne.w	8004fe4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8160 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8159 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	f040 80ce 	bne.w	8004ef4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a9 	beq.w	8004ec0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d76:	429a      	cmp	r2, r3
 8004d78:	f080 80a2 	bcs.w	8004ec0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d8e:	f000 8088 	beq.w	8004ea2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1d9      	bne.n	8004d92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e1      	bne.n	8004dde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e3      	bne.n	8004e60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd f858 	bl	8001f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8cf 	bl	800505c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ebe:	e0b3      	b.n	8005028 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ec4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	f040 80ad 	bne.w	8005028 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	f040 80a6 	bne.w	8005028 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f8b7 	bl	800505c <HAL_UARTEx_RxEventCallback>
      return;
 8004eee:	e09b      	b.n	8005028 <HAL_UART_IRQHandler+0x548>
 8004ef0:	08005261 	.word	0x08005261
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 808e 	beq.w	800502c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8089 	beq.w	800502c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e3      	bne.n	8004f1a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	623b      	str	r3, [r7, #32]
   return(result);
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e3      	bne.n	8004f98 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f83d 	bl	800505c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fe2:	e023      	b.n	800502c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <HAL_UART_IRQHandler+0x524>
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f940 	bl	8005282 <UART_Transmit_IT>
    return;
 8005002:	e014      	b.n	800502e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <HAL_UART_IRQHandler+0x54e>
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f980 	bl	8005322 <UART_EndTransmit_IT>
    return;
 8005022:	e004      	b.n	800502e <HAL_UART_IRQHandler+0x54e>
    return;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <HAL_UART_IRQHandler+0x54e>
      return;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_UART_IRQHandler+0x54e>
      return;
 800502c:	bf00      	nop
  }
}
 800502e:	37e8      	adds	r7, #232	@ 0xe8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	e03b      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d037      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fc fe1f 	bl	8001cd0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e03a      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d023      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b80      	cmp	r3, #128	@ 0x80
 80050ba:	d020      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d01d      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d116      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f857 	bl	800519a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2208      	movs	r2, #8
 80050f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00f      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	429a      	cmp	r2, r3
 800511a:	d0b4      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	88fa      	ldrh	r2, [r7, #6]
 800513e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2222      	movs	r2, #34	@ 0x22
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800516a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0220 	orr.w	r2, r2, #32
 800518a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800519a:	b480      	push	{r7}
 800519c:	b095      	sub	sp, #84	@ 0x54
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80051c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	2b01      	cmp	r3, #1
 8005210:	d119      	bne.n	8005246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	60bb      	str	r3, [r7, #8]
   return(result);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 0310 	bic.w	r3, r3, #16
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005232:	61ba      	str	r2, [r7, #24]
 8005234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	6979      	ldr	r1, [r7, #20]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	613b      	str	r3, [r7, #16]
   return(result);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e5      	bne.n	8005212 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005254:	bf00      	nop
 8005256:	3754      	adds	r7, #84	@ 0x54
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff fee7 	bl	8005048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b21      	cmp	r3, #33	@ 0x21
 8005294:	d13e      	bne.n	8005314 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529e:	d114      	bne.n	80052ca <UART_Transmit_IT+0x48>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d110      	bne.n	80052ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	1c9a      	adds	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]
 80052c8:	e008      	b.n	80052dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6211      	str	r1, [r2, #32]
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4619      	mov	r1, r3
 80052ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800530e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005338:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fe76 	bl	8005034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b08c      	sub	sp, #48	@ 0x30
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b22      	cmp	r3, #34	@ 0x22
 800536c:	f040 80aa 	bne.w	80054c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005378:	d115      	bne.n	80053a6 <UART_Receive_IT+0x54>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d111      	bne.n	80053a6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005386:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005394:	b29a      	uxth	r2, r3
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80053a4:	e024      	b.n	80053f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b4:	d007      	beq.n	80053c6 <UART_Receive_IT+0x74>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <UART_Receive_IT+0x82>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e008      	b.n	80053e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4619      	mov	r1, r3
 80053fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005400:	2b00      	cmp	r3, #0
 8005402:	d15d      	bne.n	80054c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0220 	bic.w	r2, r2, #32
 8005412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	2b01      	cmp	r3, #1
 8005448:	d135      	bne.n	80054b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	613b      	str	r3, [r7, #16]
   return(result);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005470:	623a      	str	r2, [r7, #32]
 8005472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69f9      	ldr	r1, [r7, #28]
 8005476:	6a3a      	ldr	r2, [r7, #32]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	61bb      	str	r3, [r7, #24]
   return(result);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b10      	cmp	r3, #16
 8005490:	d10a      	bne.n	80054a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fdd4 	bl	800505c <HAL_UARTEx_RxEventCallback>
 80054b4:	e002      	b.n	80054bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb fb7e 	bl	8000bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e002      	b.n	80054c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3730      	adds	r7, #48	@ 0x30
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b0c0      	sub	sp, #256	@ 0x100
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	68d9      	ldr	r1, [r3, #12]
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	ea40 0301 	orr.w	r3, r0, r1
 80054f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005528:	f021 010c 	bic.w	r1, r1, #12
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005536:	430b      	orrs	r3, r1
 8005538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	6999      	ldr	r1, [r3, #24]
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	ea40 0301 	orr.w	r3, r0, r1
 8005556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b8f      	ldr	r3, [pc, #572]	@ (800579c <UART_SetConfig+0x2cc>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d005      	beq.n	8005570 <UART_SetConfig+0xa0>
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b8d      	ldr	r3, [pc, #564]	@ (80057a0 <UART_SetConfig+0x2d0>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d104      	bne.n	800557a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005570:	f7fe f990 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8005574:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005578:	e003      	b.n	8005582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800557a:	f7fe f977 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 800557e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800558c:	f040 810c 	bne.w	80057a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800559a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800559e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	1891      	adds	r1, r2, r2
 80055a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055aa:	415b      	adcs	r3, r3
 80055ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055b2:	4621      	mov	r1, r4
 80055b4:	eb12 0801 	adds.w	r8, r2, r1
 80055b8:	4629      	mov	r1, r5
 80055ba:	eb43 0901 	adc.w	r9, r3, r1
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d2:	4690      	mov	r8, r2
 80055d4:	4699      	mov	r9, r3
 80055d6:	4623      	mov	r3, r4
 80055d8:	eb18 0303 	adds.w	r3, r8, r3
 80055dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055e0:	462b      	mov	r3, r5
 80055e2:	eb49 0303 	adc.w	r3, r9, r3
 80055e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055fe:	460b      	mov	r3, r1
 8005600:	18db      	adds	r3, r3, r3
 8005602:	653b      	str	r3, [r7, #80]	@ 0x50
 8005604:	4613      	mov	r3, r2
 8005606:	eb42 0303 	adc.w	r3, r2, r3
 800560a:	657b      	str	r3, [r7, #84]	@ 0x54
 800560c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005614:	f7fa fe54 	bl	80002c0 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4b61      	ldr	r3, [pc, #388]	@ (80057a4 <UART_SetConfig+0x2d4>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	011c      	lsls	r4, r3, #4
 8005626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800562a:	2200      	movs	r2, #0
 800562c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005630:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005638:	4642      	mov	r2, r8
 800563a:	464b      	mov	r3, r9
 800563c:	1891      	adds	r1, r2, r2
 800563e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005640:	415b      	adcs	r3, r3
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005648:	4641      	mov	r1, r8
 800564a:	eb12 0a01 	adds.w	sl, r2, r1
 800564e:	4649      	mov	r1, r9
 8005650:	eb43 0b01 	adc.w	fp, r3, r1
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005668:	4692      	mov	sl, r2
 800566a:	469b      	mov	fp, r3
 800566c:	4643      	mov	r3, r8
 800566e:	eb1a 0303 	adds.w	r3, sl, r3
 8005672:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005676:	464b      	mov	r3, r9
 8005678:	eb4b 0303 	adc.w	r3, fp, r3
 800567c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800568c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005694:	460b      	mov	r3, r1
 8005696:	18db      	adds	r3, r3, r3
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
 800569a:	4613      	mov	r3, r2
 800569c:	eb42 0303 	adc.w	r3, r2, r3
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056aa:	f7fa fe09 	bl	80002c0 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	4b3b      	ldr	r3, [pc, #236]	@ (80057a4 <UART_SetConfig+0x2d4>)
 80056b6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2264      	movs	r2, #100	@ 0x64
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	1acb      	subs	r3, r1, r3
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056ca:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <UART_SetConfig+0x2d4>)
 80056cc:	fba3 2302 	umull	r2, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056d8:	441c      	add	r4, r3
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056ec:	4642      	mov	r2, r8
 80056ee:	464b      	mov	r3, r9
 80056f0:	1891      	adds	r1, r2, r2
 80056f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056f4:	415b      	adcs	r3, r3
 80056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056fc:	4641      	mov	r1, r8
 80056fe:	1851      	adds	r1, r2, r1
 8005700:	6339      	str	r1, [r7, #48]	@ 0x30
 8005702:	4649      	mov	r1, r9
 8005704:	414b      	adcs	r3, r1
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005714:	4659      	mov	r1, fp
 8005716:	00cb      	lsls	r3, r1, #3
 8005718:	4651      	mov	r1, sl
 800571a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571e:	4651      	mov	r1, sl
 8005720:	00ca      	lsls	r2, r1, #3
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	4603      	mov	r3, r0
 8005728:	4642      	mov	r2, r8
 800572a:	189b      	adds	r3, r3, r2
 800572c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005730:	464b      	mov	r3, r9
 8005732:	460a      	mov	r2, r1
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005748:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800574c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005750:	460b      	mov	r3, r1
 8005752:	18db      	adds	r3, r3, r3
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005756:	4613      	mov	r3, r2
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005766:	f7fa fdab 	bl	80002c0 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <UART_SetConfig+0x2d4>)
 8005770:	fba3 1302 	umull	r1, r3, r3, r2
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	2164      	movs	r1, #100	@ 0x64
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	3332      	adds	r3, #50	@ 0x32
 8005782:	4a08      	ldr	r2, [pc, #32]	@ (80057a4 <UART_SetConfig+0x2d4>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f003 0207 	and.w	r2, r3, #7
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4422      	add	r2, r4
 8005796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005798:	e106      	b.n	80059a8 <UART_SetConfig+0x4d8>
 800579a:	bf00      	nop
 800579c:	40011000 	.word	0x40011000
 80057a0:	40011400 	.word	0x40011400
 80057a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	6239      	str	r1, [r7, #32]
 80057c2:	415b      	adcs	r3, r3
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ca:	4641      	mov	r1, r8
 80057cc:	1854      	adds	r4, r2, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	eb43 0501 	adc.w	r5, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	00eb      	lsls	r3, r5, #3
 80057de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057e2:	00e2      	lsls	r2, r4, #3
 80057e4:	4614      	mov	r4, r2
 80057e6:	461d      	mov	r5, r3
 80057e8:	4643      	mov	r3, r8
 80057ea:	18e3      	adds	r3, r4, r3
 80057ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057f0:	464b      	mov	r3, r9
 80057f2:	eb45 0303 	adc.w	r3, r5, r3
 80057f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005816:	4629      	mov	r1, r5
 8005818:	008b      	lsls	r3, r1, #2
 800581a:	4621      	mov	r1, r4
 800581c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005820:	4621      	mov	r1, r4
 8005822:	008a      	lsls	r2, r1, #2
 8005824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005828:	f7fa fd4a 	bl	80002c0 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b60      	ldr	r3, [pc, #384]	@ (80059b4 <UART_SetConfig+0x4e4>)
 8005832:	fba3 2302 	umull	r2, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	011c      	lsls	r4, r3, #4
 800583a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583e:	2200      	movs	r2, #0
 8005840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005844:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800584c:	4642      	mov	r2, r8
 800584e:	464b      	mov	r3, r9
 8005850:	1891      	adds	r1, r2, r2
 8005852:	61b9      	str	r1, [r7, #24]
 8005854:	415b      	adcs	r3, r3
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800585c:	4641      	mov	r1, r8
 800585e:	1851      	adds	r1, r2, r1
 8005860:	6139      	str	r1, [r7, #16]
 8005862:	4649      	mov	r1, r9
 8005864:	414b      	adcs	r3, r1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005874:	4659      	mov	r1, fp
 8005876:	00cb      	lsls	r3, r1, #3
 8005878:	4651      	mov	r1, sl
 800587a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800587e:	4651      	mov	r1, sl
 8005880:	00ca      	lsls	r2, r1, #3
 8005882:	4610      	mov	r0, r2
 8005884:	4619      	mov	r1, r3
 8005886:	4603      	mov	r3, r0
 8005888:	4642      	mov	r2, r8
 800588a:	189b      	adds	r3, r3, r2
 800588c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005890:	464b      	mov	r3, r9
 8005892:	460a      	mov	r2, r1
 8005894:	eb42 0303 	adc.w	r3, r2, r3
 8005898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058b4:	4649      	mov	r1, r9
 80058b6:	008b      	lsls	r3, r1, #2
 80058b8:	4641      	mov	r1, r8
 80058ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058be:	4641      	mov	r1, r8
 80058c0:	008a      	lsls	r2, r1, #2
 80058c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058c6:	f7fa fcfb 	bl	80002c0 <__aeabi_uldivmod>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	4b38      	ldr	r3, [pc, #224]	@ (80059b4 <UART_SetConfig+0x4e4>)
 80058d2:	fba3 2301 	umull	r2, r3, r3, r1
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	2264      	movs	r2, #100	@ 0x64
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	1acb      	subs	r3, r1, r3
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	3332      	adds	r3, #50	@ 0x32
 80058e4:	4a33      	ldr	r2, [pc, #204]	@ (80059b4 <UART_SetConfig+0x4e4>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f0:	441c      	add	r4, r3
 80058f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f6:	2200      	movs	r2, #0
 80058f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80058fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80058fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	415b      	adcs	r3, r3
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005910:	4641      	mov	r1, r8
 8005912:	1851      	adds	r1, r2, r1
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	4649      	mov	r1, r9
 8005918:	414b      	adcs	r3, r1
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005928:	4659      	mov	r1, fp
 800592a:	00cb      	lsls	r3, r1, #3
 800592c:	4651      	mov	r1, sl
 800592e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005932:	4651      	mov	r1, sl
 8005934:	00ca      	lsls	r2, r1, #3
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	4603      	mov	r3, r0
 800593c:	4642      	mov	r2, r8
 800593e:	189b      	adds	r3, r3, r2
 8005940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005942:	464b      	mov	r3, r9
 8005944:	460a      	mov	r2, r1
 8005946:	eb42 0303 	adc.w	r3, r2, r3
 800594a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	663b      	str	r3, [r7, #96]	@ 0x60
 8005956:	667a      	str	r2, [r7, #100]	@ 0x64
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005964:	4649      	mov	r1, r9
 8005966:	008b      	lsls	r3, r1, #2
 8005968:	4641      	mov	r1, r8
 800596a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596e:	4641      	mov	r1, r8
 8005970:	008a      	lsls	r2, r1, #2
 8005972:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005976:	f7fa fca3 	bl	80002c0 <__aeabi_uldivmod>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <UART_SetConfig+0x4e4>)
 8005980:	fba3 1302 	umull	r1, r3, r3, r2
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	2164      	movs	r1, #100	@ 0x64
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	3332      	adds	r3, #50	@ 0x32
 8005992:	4a08      	ldr	r2, [pc, #32]	@ (80059b4 <UART_SetConfig+0x4e4>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4422      	add	r2, r4
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ae:	46bd      	mov	sp, r7
 80059b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059b4:	51eb851f 	.word	0x51eb851f

080059b8 <sniprintf>:
 80059b8:	b40c      	push	{r2, r3}
 80059ba:	b530      	push	{r4, r5, lr}
 80059bc:	4b18      	ldr	r3, [pc, #96]	@ (8005a20 <sniprintf+0x68>)
 80059be:	1e0c      	subs	r4, r1, #0
 80059c0:	681d      	ldr	r5, [r3, #0]
 80059c2:	b09d      	sub	sp, #116	@ 0x74
 80059c4:	da08      	bge.n	80059d8 <sniprintf+0x20>
 80059c6:	238b      	movs	r3, #139	@ 0x8b
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	f04f 30ff 	mov.w	r0, #4294967295
 80059ce:	b01d      	add	sp, #116	@ 0x74
 80059d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d4:	b002      	add	sp, #8
 80059d6:	4770      	bx	lr
 80059d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80059e6:	bf14      	ite	ne
 80059e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059ec:	4623      	moveq	r3, r4
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	9307      	str	r3, [sp, #28]
 80059f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059f6:	9002      	str	r0, [sp, #8]
 80059f8:	9006      	str	r0, [sp, #24]
 80059fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a00:	ab21      	add	r3, sp, #132	@ 0x84
 8005a02:	a902      	add	r1, sp, #8
 8005a04:	4628      	mov	r0, r5
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	f000 f9d2 	bl	8005db0 <_svfiprintf_r>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	bfbc      	itt	lt
 8005a10:	238b      	movlt	r3, #139	@ 0x8b
 8005a12:	602b      	strlt	r3, [r5, #0]
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	d0da      	beq.n	80059ce <sniprintf+0x16>
 8005a18:	9b02      	ldr	r3, [sp, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e7d6      	b.n	80059ce <sniprintf+0x16>
 8005a20:	20000010 	.word	0x20000010

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <strncmp>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	b16a      	cbz	r2, 8005a54 <strncmp+0x20>
 8005a38:	3901      	subs	r1, #1
 8005a3a:	1884      	adds	r4, r0, r2
 8005a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d103      	bne.n	8005a50 <strncmp+0x1c>
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d001      	beq.n	8005a50 <strncmp+0x1c>
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d1f5      	bne.n	8005a3c <strncmp+0x8>
 8005a50:	1ad0      	subs	r0, r2, r3
 8005a52:	bd10      	pop	{r4, pc}
 8005a54:	4610      	mov	r0, r2
 8005a56:	e7fc      	b.n	8005a52 <strncmp+0x1e>

08005a58 <strstr>:
 8005a58:	780a      	ldrb	r2, [r1, #0]
 8005a5a:	b570      	push	{r4, r5, r6, lr}
 8005a5c:	b96a      	cbnz	r2, 8005a7a <strstr+0x22>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d109      	bne.n	8005a78 <strstr+0x20>
 8005a64:	460c      	mov	r4, r1
 8005a66:	4605      	mov	r5, r0
 8005a68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f6      	beq.n	8005a5e <strstr+0x6>
 8005a70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005a74:	429e      	cmp	r6, r3
 8005a76:	d0f7      	beq.n	8005a68 <strstr+0x10>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	7803      	ldrb	r3, [r0, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ef      	bne.n	8005a60 <strstr+0x8>
 8005a80:	4618      	mov	r0, r3
 8005a82:	e7ec      	b.n	8005a5e <strstr+0x6>

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	@ (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000010 	.word	0x20000010

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	@ (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 fc6c 	bl	8006380 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08006484 	.word	0x08006484
 8005acc:	08006484 	.word	0x08006484
 8005ad0:	08006484 	.word	0x08006484
 8005ad4:	08006488 	.word	0x08006488

08005ad8 <__retarget_lock_acquire_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_release_recursive>:
 8005ada:	4770      	bx	lr

08005adc <strcpy>:
 8005adc:	4603      	mov	r3, r0
 8005ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ae2:	f803 2b01 	strb.w	r2, [r3], #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1f9      	bne.n	8005ade <strcpy+0x2>
 8005aea:	4770      	bx	lr

08005aec <memcpy>:
 8005aec:	440a      	add	r2, r1
 8005aee:	4291      	cmp	r1, r2
 8005af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af4:	d100      	bne.n	8005af8 <memcpy+0xc>
 8005af6:	4770      	bx	lr
 8005af8:	b510      	push	{r4, lr}
 8005afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b02:	4291      	cmp	r1, r2
 8005b04:	d1f9      	bne.n	8005afa <memcpy+0xe>
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <_free_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	d041      	beq.n	8005b94 <_free_r+0x8c>
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f0c      	subs	r4, r1, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb8      	it	lt
 8005b1a:	18e4      	addlt	r4, r4, r3
 8005b1c:	f000 f8e0 	bl	8005ce0 <__malloc_lock>
 8005b20:	4a1d      	ldr	r2, [pc, #116]	@ (8005b98 <_free_r+0x90>)
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	b933      	cbnz	r3, 8005b34 <_free_r+0x2c>
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	6014      	str	r4, [r2, #0]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b30:	f000 b8dc 	b.w	8005cec <__malloc_unlock>
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d908      	bls.n	8005b4a <_free_r+0x42>
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	1821      	adds	r1, r4, r0
 8005b3c:	428b      	cmp	r3, r1
 8005b3e:	bf01      	itttt	eq
 8005b40:	6819      	ldreq	r1, [r3, #0]
 8005b42:	685b      	ldreq	r3, [r3, #4]
 8005b44:	1809      	addeq	r1, r1, r0
 8005b46:	6021      	streq	r1, [r4, #0]
 8005b48:	e7ed      	b.n	8005b26 <_free_r+0x1e>
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	b10b      	cbz	r3, 8005b54 <_free_r+0x4c>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d9fa      	bls.n	8005b4a <_free_r+0x42>
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	1850      	adds	r0, r2, r1
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d10b      	bne.n	8005b74 <_free_r+0x6c>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	4401      	add	r1, r0
 8005b60:	1850      	adds	r0, r2, r1
 8005b62:	4283      	cmp	r3, r0
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	d1e0      	bne.n	8005b2a <_free_r+0x22>
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	6053      	str	r3, [r2, #4]
 8005b6e:	4408      	add	r0, r1
 8005b70:	6010      	str	r0, [r2, #0]
 8005b72:	e7da      	b.n	8005b2a <_free_r+0x22>
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x74>
 8005b76:	230c      	movs	r3, #12
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	e7d6      	b.n	8005b2a <_free_r+0x22>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf04      	itt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	6063      	str	r3, [r4, #4]
 8005b8a:	bf04      	itt	eq
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	6054      	str	r4, [r2, #4]
 8005b92:	e7ca      	b.n	8005b2a <_free_r+0x22>
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20000598 	.word	0x20000598

08005b9c <sbrk_aligned>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005bdc <sbrk_aligned+0x40>)
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	6831      	ldr	r1, [r6, #0]
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	b911      	cbnz	r1, 8005bae <sbrk_aligned+0x12>
 8005ba8:	f000 fba4 	bl	80062f4 <_sbrk_r>
 8005bac:	6030      	str	r0, [r6, #0]
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 fb9f 	bl	80062f4 <_sbrk_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	d103      	bne.n	8005bc2 <sbrk_aligned+0x26>
 8005bba:	f04f 34ff 	mov.w	r4, #4294967295
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	1cc4      	adds	r4, r0, #3
 8005bc4:	f024 0403 	bic.w	r4, r4, #3
 8005bc8:	42a0      	cmp	r0, r4
 8005bca:	d0f8      	beq.n	8005bbe <sbrk_aligned+0x22>
 8005bcc:	1a21      	subs	r1, r4, r0
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 fb90 	bl	80062f4 <_sbrk_r>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d1f2      	bne.n	8005bbe <sbrk_aligned+0x22>
 8005bd8:	e7ef      	b.n	8005bba <sbrk_aligned+0x1e>
 8005bda:	bf00      	nop
 8005bdc:	20000594 	.word	0x20000594

08005be0 <_malloc_r>:
 8005be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be4:	1ccd      	adds	r5, r1, #3
 8005be6:	f025 0503 	bic.w	r5, r5, #3
 8005bea:	3508      	adds	r5, #8
 8005bec:	2d0c      	cmp	r5, #12
 8005bee:	bf38      	it	cc
 8005bf0:	250c      	movcc	r5, #12
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	db01      	blt.n	8005bfc <_malloc_r+0x1c>
 8005bf8:	42a9      	cmp	r1, r5
 8005bfa:	d904      	bls.n	8005c06 <_malloc_r+0x26>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	2000      	movs	r0, #0
 8005c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cdc <_malloc_r+0xfc>
 8005c0a:	f000 f869 	bl	8005ce0 <__malloc_lock>
 8005c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c12:	461c      	mov	r4, r3
 8005c14:	bb44      	cbnz	r4, 8005c68 <_malloc_r+0x88>
 8005c16:	4629      	mov	r1, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f7ff ffbf 	bl	8005b9c <sbrk_aligned>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	4604      	mov	r4, r0
 8005c22:	d158      	bne.n	8005cd6 <_malloc_r+0xf6>
 8005c24:	f8d8 4000 	ldr.w	r4, [r8]
 8005c28:	4627      	mov	r7, r4
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d143      	bne.n	8005cb6 <_malloc_r+0xd6>
 8005c2e:	2c00      	cmp	r4, #0
 8005c30:	d04b      	beq.n	8005cca <_malloc_r+0xea>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	4639      	mov	r1, r7
 8005c36:	4630      	mov	r0, r6
 8005c38:	eb04 0903 	add.w	r9, r4, r3
 8005c3c:	f000 fb5a 	bl	80062f4 <_sbrk_r>
 8005c40:	4581      	cmp	r9, r0
 8005c42:	d142      	bne.n	8005cca <_malloc_r+0xea>
 8005c44:	6821      	ldr	r1, [r4, #0]
 8005c46:	1a6d      	subs	r5, r5, r1
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ffa6 	bl	8005b9c <sbrk_aligned>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d03a      	beq.n	8005cca <_malloc_r+0xea>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	442b      	add	r3, r5
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	bb62      	cbnz	r2, 8005cbc <_malloc_r+0xdc>
 8005c62:	f8c8 7000 	str.w	r7, [r8]
 8005c66:	e00f      	b.n	8005c88 <_malloc_r+0xa8>
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	1b52      	subs	r2, r2, r5
 8005c6c:	d420      	bmi.n	8005cb0 <_malloc_r+0xd0>
 8005c6e:	2a0b      	cmp	r2, #11
 8005c70:	d917      	bls.n	8005ca2 <_malloc_r+0xc2>
 8005c72:	1961      	adds	r1, r4, r5
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	6025      	str	r5, [r4, #0]
 8005c78:	bf18      	it	ne
 8005c7a:	6059      	strne	r1, [r3, #4]
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	bf08      	it	eq
 8005c80:	f8c8 1000 	streq.w	r1, [r8]
 8005c84:	5162      	str	r2, [r4, r5]
 8005c86:	604b      	str	r3, [r1, #4]
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 f82f 	bl	8005cec <__malloc_unlock>
 8005c8e:	f104 000b 	add.w	r0, r4, #11
 8005c92:	1d23      	adds	r3, r4, #4
 8005c94:	f020 0007 	bic.w	r0, r0, #7
 8005c98:	1ac2      	subs	r2, r0, r3
 8005c9a:	bf1c      	itt	ne
 8005c9c:	1a1b      	subne	r3, r3, r0
 8005c9e:	50a3      	strne	r3, [r4, r2]
 8005ca0:	e7af      	b.n	8005c02 <_malloc_r+0x22>
 8005ca2:	6862      	ldr	r2, [r4, #4]
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	bf0c      	ite	eq
 8005ca8:	f8c8 2000 	streq.w	r2, [r8]
 8005cac:	605a      	strne	r2, [r3, #4]
 8005cae:	e7eb      	b.n	8005c88 <_malloc_r+0xa8>
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	6864      	ldr	r4, [r4, #4]
 8005cb4:	e7ae      	b.n	8005c14 <_malloc_r+0x34>
 8005cb6:	463c      	mov	r4, r7
 8005cb8:	687f      	ldr	r7, [r7, #4]
 8005cba:	e7b6      	b.n	8005c2a <_malloc_r+0x4a>
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d1fb      	bne.n	8005cbc <_malloc_r+0xdc>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6053      	str	r3, [r2, #4]
 8005cc8:	e7de      	b.n	8005c88 <_malloc_r+0xa8>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f000 f80c 	bl	8005cec <__malloc_unlock>
 8005cd4:	e794      	b.n	8005c00 <_malloc_r+0x20>
 8005cd6:	6005      	str	r5, [r0, #0]
 8005cd8:	e7d6      	b.n	8005c88 <_malloc_r+0xa8>
 8005cda:	bf00      	nop
 8005cdc:	20000598 	.word	0x20000598

08005ce0 <__malloc_lock>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	@ (8005ce8 <__malloc_lock+0x8>)
 8005ce2:	f7ff bef9 	b.w	8005ad8 <__retarget_lock_acquire_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000590 	.word	0x20000590

08005cec <__malloc_unlock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	@ (8005cf4 <__malloc_unlock+0x8>)
 8005cee:	f7ff bef4 	b.w	8005ada <__retarget_lock_release_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	20000590 	.word	0x20000590

08005cf8 <__ssputs_r>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	688e      	ldr	r6, [r1, #8]
 8005cfe:	461f      	mov	r7, r3
 8005d00:	42be      	cmp	r6, r7
 8005d02:	680b      	ldr	r3, [r1, #0]
 8005d04:	4682      	mov	sl, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	4690      	mov	r8, r2
 8005d0a:	d82d      	bhi.n	8005d68 <__ssputs_r+0x70>
 8005d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d14:	d026      	beq.n	8005d64 <__ssputs_r+0x6c>
 8005d16:	6965      	ldr	r5, [r4, #20]
 8005d18:	6909      	ldr	r1, [r1, #16]
 8005d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d1e:	eba3 0901 	sub.w	r9, r3, r1
 8005d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d26:	1c7b      	adds	r3, r7, #1
 8005d28:	444b      	add	r3, r9
 8005d2a:	106d      	asrs	r5, r5, #1
 8005d2c:	429d      	cmp	r5, r3
 8005d2e:	bf38      	it	cc
 8005d30:	461d      	movcc	r5, r3
 8005d32:	0553      	lsls	r3, r2, #21
 8005d34:	d527      	bpl.n	8005d86 <__ssputs_r+0x8e>
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7ff ff52 	bl	8005be0 <_malloc_r>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	b360      	cbz	r0, 8005d9a <__ssputs_r+0xa2>
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	464a      	mov	r2, r9
 8005d44:	f7ff fed2 	bl	8005aec <memcpy>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	6126      	str	r6, [r4, #16]
 8005d56:	6165      	str	r5, [r4, #20]
 8005d58:	444e      	add	r6, r9
 8005d5a:	eba5 0509 	sub.w	r5, r5, r9
 8005d5e:	6026      	str	r6, [r4, #0]
 8005d60:	60a5      	str	r5, [r4, #8]
 8005d62:	463e      	mov	r6, r7
 8005d64:	42be      	cmp	r6, r7
 8005d66:	d900      	bls.n	8005d6a <__ssputs_r+0x72>
 8005d68:	463e      	mov	r6, r7
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4641      	mov	r1, r8
 8005d70:	f000 faa6 	bl	80062c0 <memmove>
 8005d74:	68a3      	ldr	r3, [r4, #8]
 8005d76:	1b9b      	subs	r3, r3, r6
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	4433      	add	r3, r6
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	2000      	movs	r0, #0
 8005d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d86:	462a      	mov	r2, r5
 8005d88:	f000 fac4 	bl	8006314 <_realloc_r>
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d1e0      	bne.n	8005d54 <__ssputs_r+0x5c>
 8005d92:	6921      	ldr	r1, [r4, #16]
 8005d94:	4650      	mov	r0, sl
 8005d96:	f7ff feb7 	bl	8005b08 <_free_r>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	f8ca 3000 	str.w	r3, [sl]
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	e7e9      	b.n	8005d82 <__ssputs_r+0x8a>
	...

08005db0 <_svfiprintf_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	4698      	mov	r8, r3
 8005db6:	898b      	ldrh	r3, [r1, #12]
 8005db8:	061b      	lsls	r3, r3, #24
 8005dba:	b09d      	sub	sp, #116	@ 0x74
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	d510      	bpl.n	8005de6 <_svfiprintf_r+0x36>
 8005dc4:	690b      	ldr	r3, [r1, #16]
 8005dc6:	b973      	cbnz	r3, 8005de6 <_svfiprintf_r+0x36>
 8005dc8:	2140      	movs	r1, #64	@ 0x40
 8005dca:	f7ff ff09 	bl	8005be0 <_malloc_r>
 8005dce:	6028      	str	r0, [r5, #0]
 8005dd0:	6128      	str	r0, [r5, #16]
 8005dd2:	b930      	cbnz	r0, 8005de2 <_svfiprintf_r+0x32>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	b01d      	add	sp, #116	@ 0x74
 8005dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de2:	2340      	movs	r3, #64	@ 0x40
 8005de4:	616b      	str	r3, [r5, #20]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dea:	2320      	movs	r3, #32
 8005dec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df4:	2330      	movs	r3, #48	@ 0x30
 8005df6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f94 <_svfiprintf_r+0x1e4>
 8005dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dfe:	f04f 0901 	mov.w	r9, #1
 8005e02:	4623      	mov	r3, r4
 8005e04:	469a      	mov	sl, r3
 8005e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0a:	b10a      	cbz	r2, 8005e10 <_svfiprintf_r+0x60>
 8005e0c:	2a25      	cmp	r2, #37	@ 0x25
 8005e0e:	d1f9      	bne.n	8005e04 <_svfiprintf_r+0x54>
 8005e10:	ebba 0b04 	subs.w	fp, sl, r4
 8005e14:	d00b      	beq.n	8005e2e <_svfiprintf_r+0x7e>
 8005e16:	465b      	mov	r3, fp
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff ff6b 	bl	8005cf8 <__ssputs_r>
 8005e22:	3001      	adds	r0, #1
 8005e24:	f000 80a7 	beq.w	8005f76 <_svfiprintf_r+0x1c6>
 8005e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e2a:	445a      	add	r2, fp
 8005e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 809f 	beq.w	8005f76 <_svfiprintf_r+0x1c6>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e42:	f10a 0a01 	add.w	sl, sl, #1
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e50:	4654      	mov	r4, sl
 8005e52:	2205      	movs	r2, #5
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	484e      	ldr	r0, [pc, #312]	@ (8005f94 <_svfiprintf_r+0x1e4>)
 8005e5a:	f7fa f9e1 	bl	8000220 <memchr>
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	b9d8      	cbnz	r0, 8005e9a <_svfiprintf_r+0xea>
 8005e62:	06d0      	lsls	r0, r2, #27
 8005e64:	bf44      	itt	mi
 8005e66:	2320      	movmi	r3, #32
 8005e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6c:	0711      	lsls	r1, r2, #28
 8005e6e:	bf44      	itt	mi
 8005e70:	232b      	movmi	r3, #43	@ 0x2b
 8005e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e76:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e7c:	d015      	beq.n	8005eaa <_svfiprintf_r+0xfa>
 8005e7e:	9a07      	ldr	r2, [sp, #28]
 8005e80:	4654      	mov	r4, sl
 8005e82:	2000      	movs	r0, #0
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e8e:	3b30      	subs	r3, #48	@ 0x30
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d94b      	bls.n	8005f2c <_svfiprintf_r+0x17c>
 8005e94:	b1b0      	cbz	r0, 8005ec4 <_svfiprintf_r+0x114>
 8005e96:	9207      	str	r2, [sp, #28]
 8005e98:	e014      	b.n	8005ec4 <_svfiprintf_r+0x114>
 8005e9a:	eba0 0308 	sub.w	r3, r0, r8
 8005e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	46a2      	mov	sl, r4
 8005ea8:	e7d2      	b.n	8005e50 <_svfiprintf_r+0xa0>
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	9103      	str	r1, [sp, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bfbb      	ittet	lt
 8005eb6:	425b      	neglt	r3, r3
 8005eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebc:	9307      	strge	r3, [sp, #28]
 8005ebe:	9307      	strlt	r3, [sp, #28]
 8005ec0:	bfb8      	it	lt
 8005ec2:	9204      	strlt	r2, [sp, #16]
 8005ec4:	7823      	ldrb	r3, [r4, #0]
 8005ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ec8:	d10a      	bne.n	8005ee0 <_svfiprintf_r+0x130>
 8005eca:	7863      	ldrb	r3, [r4, #1]
 8005ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ece:	d132      	bne.n	8005f36 <_svfiprintf_r+0x186>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	9203      	str	r2, [sp, #12]
 8005ed8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005edc:	3402      	adds	r4, #2
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fa4 <_svfiprintf_r+0x1f4>
 8005ee4:	7821      	ldrb	r1, [r4, #0]
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	4650      	mov	r0, sl
 8005eea:	f7fa f999 	bl	8000220 <memchr>
 8005eee:	b138      	cbz	r0, 8005f00 <_svfiprintf_r+0x150>
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	eba0 000a 	sub.w	r0, r0, sl
 8005ef6:	2240      	movs	r2, #64	@ 0x40
 8005ef8:	4082      	lsls	r2, r0
 8005efa:	4313      	orrs	r3, r2
 8005efc:	3401      	adds	r4, #1
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f04:	4824      	ldr	r0, [pc, #144]	@ (8005f98 <_svfiprintf_r+0x1e8>)
 8005f06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f0a:	2206      	movs	r2, #6
 8005f0c:	f7fa f988 	bl	8000220 <memchr>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d036      	beq.n	8005f82 <_svfiprintf_r+0x1d2>
 8005f14:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <_svfiprintf_r+0x1ec>)
 8005f16:	bb1b      	cbnz	r3, 8005f60 <_svfiprintf_r+0x1b0>
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	3307      	adds	r3, #7
 8005f1c:	f023 0307 	bic.w	r3, r3, #7
 8005f20:	3308      	adds	r3, #8
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f26:	4433      	add	r3, r6
 8005f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f2a:	e76a      	b.n	8005e02 <_svfiprintf_r+0x52>
 8005f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f30:	460c      	mov	r4, r1
 8005f32:	2001      	movs	r0, #1
 8005f34:	e7a8      	b.n	8005e88 <_svfiprintf_r+0xd8>
 8005f36:	2300      	movs	r3, #0
 8005f38:	3401      	adds	r4, #1
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f04f 0c0a 	mov.w	ip, #10
 8005f42:	4620      	mov	r0, r4
 8005f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f48:	3a30      	subs	r2, #48	@ 0x30
 8005f4a:	2a09      	cmp	r2, #9
 8005f4c:	d903      	bls.n	8005f56 <_svfiprintf_r+0x1a6>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0c6      	beq.n	8005ee0 <_svfiprintf_r+0x130>
 8005f52:	9105      	str	r1, [sp, #20]
 8005f54:	e7c4      	b.n	8005ee0 <_svfiprintf_r+0x130>
 8005f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e7f0      	b.n	8005f42 <_svfiprintf_r+0x192>
 8005f60:	ab03      	add	r3, sp, #12
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa0 <_svfiprintf_r+0x1f0>)
 8005f68:	a904      	add	r1, sp, #16
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f3af 8000 	nop.w
 8005f70:	1c42      	adds	r2, r0, #1
 8005f72:	4606      	mov	r6, r0
 8005f74:	d1d6      	bne.n	8005f24 <_svfiprintf_r+0x174>
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	065b      	lsls	r3, r3, #25
 8005f7a:	f53f af2d 	bmi.w	8005dd8 <_svfiprintf_r+0x28>
 8005f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f80:	e72c      	b.n	8005ddc <_svfiprintf_r+0x2c>
 8005f82:	ab03      	add	r3, sp, #12
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	462a      	mov	r2, r5
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <_svfiprintf_r+0x1f0>)
 8005f8a:	a904      	add	r1, sp, #16
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f000 f879 	bl	8006084 <_printf_i>
 8005f92:	e7ed      	b.n	8005f70 <_svfiprintf_r+0x1c0>
 8005f94:	08006448 	.word	0x08006448
 8005f98:	08006452 	.word	0x08006452
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	08005cf9 	.word	0x08005cf9
 8005fa4:	0800644e 	.word	0x0800644e

08005fa8 <_printf_common>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	4698      	mov	r8, r3
 8005fb0:	688a      	ldr	r2, [r1, #8]
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bfb8      	it	lt
 8005fbc:	4613      	movlt	r3, r2
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b10a      	cbz	r2, 8005fce <_printf_common+0x26>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	6833      	ldrmi	r3, [r6, #0]
 8005fd6:	3302      	addmi	r3, #2
 8005fd8:	6033      	strmi	r3, [r6, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d106      	bne.n	8005ff0 <_printf_common+0x48>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	6832      	ldr	r2, [r6, #0]
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc26      	bgt.n	800603e <_printf_common+0x96>
 8005ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	3b00      	subs	r3, #0
 8005ff8:	bf18      	it	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	0692      	lsls	r2, r2, #26
 8005ffe:	d42b      	bmi.n	8006058 <_printf_common+0xb0>
 8006000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	47c8      	blx	r9
 800600a:	3001      	adds	r0, #1
 800600c:	d01e      	beq.n	800604c <_printf_common+0xa4>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6922      	ldr	r2, [r4, #16]
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf02      	ittt	eq
 800601a:	68e5      	ldreq	r5, [r4, #12]
 800601c:	6833      	ldreq	r3, [r6, #0]
 800601e:	1aed      	subeq	r5, r5, r3
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	bf0c      	ite	eq
 8006024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006028:	2500      	movne	r5, #0
 800602a:	4293      	cmp	r3, r2
 800602c:	bfc4      	itt	gt
 800602e:	1a9b      	subgt	r3, r3, r2
 8006030:	18ed      	addgt	r5, r5, r3
 8006032:	2600      	movs	r6, #0
 8006034:	341a      	adds	r4, #26
 8006036:	42b5      	cmp	r5, r6
 8006038:	d11a      	bne.n	8006070 <_printf_common+0xc8>
 800603a:	2000      	movs	r0, #0
 800603c:	e008      	b.n	8006050 <_printf_common+0xa8>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4641      	mov	r1, r8
 8006044:	4638      	mov	r0, r7
 8006046:	47c8      	blx	r9
 8006048:	3001      	adds	r0, #1
 800604a:	d103      	bne.n	8006054 <_printf_common+0xac>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006054:	3501      	adds	r5, #1
 8006056:	e7c6      	b.n	8005fe6 <_printf_common+0x3e>
 8006058:	18e1      	adds	r1, r4, r3
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	2030      	movs	r0, #48	@ 0x30
 800605e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006062:	4422      	add	r2, r4
 8006064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800606c:	3302      	adds	r3, #2
 800606e:	e7c7      	b.n	8006000 <_printf_common+0x58>
 8006070:	2301      	movs	r3, #1
 8006072:	4622      	mov	r2, r4
 8006074:	4641      	mov	r1, r8
 8006076:	4638      	mov	r0, r7
 8006078:	47c8      	blx	r9
 800607a:	3001      	adds	r0, #1
 800607c:	d0e6      	beq.n	800604c <_printf_common+0xa4>
 800607e:	3601      	adds	r6, #1
 8006080:	e7d9      	b.n	8006036 <_printf_common+0x8e>
	...

08006084 <_printf_i>:
 8006084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	7e0f      	ldrb	r7, [r1, #24]
 800608a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800608c:	2f78      	cmp	r7, #120	@ 0x78
 800608e:	4691      	mov	r9, r2
 8006090:	4680      	mov	r8, r0
 8006092:	460c      	mov	r4, r1
 8006094:	469a      	mov	sl, r3
 8006096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800609a:	d807      	bhi.n	80060ac <_printf_i+0x28>
 800609c:	2f62      	cmp	r7, #98	@ 0x62
 800609e:	d80a      	bhi.n	80060b6 <_printf_i+0x32>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f000 80d1 	beq.w	8006248 <_printf_i+0x1c4>
 80060a6:	2f58      	cmp	r7, #88	@ 0x58
 80060a8:	f000 80b8 	beq.w	800621c <_printf_i+0x198>
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060b4:	e03a      	b.n	800612c <_printf_i+0xa8>
 80060b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ba:	2b15      	cmp	r3, #21
 80060bc:	d8f6      	bhi.n	80060ac <_printf_i+0x28>
 80060be:	a101      	add	r1, pc, #4	@ (adr r1, 80060c4 <_printf_i+0x40>)
 80060c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006131 	.word	0x08006131
 80060cc:	080060ad 	.word	0x080060ad
 80060d0:	080060ad 	.word	0x080060ad
 80060d4:	080060ad 	.word	0x080060ad
 80060d8:	080060ad 	.word	0x080060ad
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	080060ad 	.word	0x080060ad
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	0800622f 	.word	0x0800622f
 80060f4:	0800615b 	.word	0x0800615b
 80060f8:	080061e9 	.word	0x080061e9
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	08006251 	.word	0x08006251
 8006108:	080060ad 	.word	0x080060ad
 800610c:	0800615b 	.word	0x0800615b
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	080061f1 	.word	0x080061f1
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6032      	str	r2, [r6, #0]
 8006124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e09c      	b.n	800626a <_printf_i+0x1e6>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	6031      	str	r1, [r6, #0]
 8006138:	0606      	lsls	r6, r0, #24
 800613a:	d501      	bpl.n	8006140 <_printf_i+0xbc>
 800613c:	681d      	ldr	r5, [r3, #0]
 800613e:	e003      	b.n	8006148 <_printf_i+0xc4>
 8006140:	0645      	lsls	r5, r0, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0xb8>
 8006144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006148:	2d00      	cmp	r5, #0
 800614a:	da03      	bge.n	8006154 <_printf_i+0xd0>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	426d      	negs	r5, r5
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	4858      	ldr	r0, [pc, #352]	@ (80062b8 <_printf_i+0x234>)
 8006156:	230a      	movs	r3, #10
 8006158:	e011      	b.n	800617e <_printf_i+0xfa>
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	0608      	lsls	r0, r1, #24
 8006160:	f853 5b04 	ldr.w	r5, [r3], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0xe8>
 8006166:	0649      	lsls	r1, r1, #25
 8006168:	bf48      	it	mi
 800616a:	b2ad      	uxthmi	r5, r5
 800616c:	2f6f      	cmp	r7, #111	@ 0x6f
 800616e:	4852      	ldr	r0, [pc, #328]	@ (80062b8 <_printf_i+0x234>)
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	bf14      	ite	ne
 8006174:	230a      	movne	r3, #10
 8006176:	2308      	moveq	r3, #8
 8006178:	2100      	movs	r1, #0
 800617a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800617e:	6866      	ldr	r6, [r4, #4]
 8006180:	60a6      	str	r6, [r4, #8]
 8006182:	2e00      	cmp	r6, #0
 8006184:	db05      	blt.n	8006192 <_printf_i+0x10e>
 8006186:	6821      	ldr	r1, [r4, #0]
 8006188:	432e      	orrs	r6, r5
 800618a:	f021 0104 	bic.w	r1, r1, #4
 800618e:	6021      	str	r1, [r4, #0]
 8006190:	d04b      	beq.n	800622a <_printf_i+0x1a6>
 8006192:	4616      	mov	r6, r2
 8006194:	fbb5 f1f3 	udiv	r1, r5, r3
 8006198:	fb03 5711 	mls	r7, r3, r1, r5
 800619c:	5dc7      	ldrb	r7, [r0, r7]
 800619e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a2:	462f      	mov	r7, r5
 80061a4:	42bb      	cmp	r3, r7
 80061a6:	460d      	mov	r5, r1
 80061a8:	d9f4      	bls.n	8006194 <_printf_i+0x110>
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d10b      	bne.n	80061c6 <_printf_i+0x142>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	07df      	lsls	r7, r3, #31
 80061b2:	d508      	bpl.n	80061c6 <_printf_i+0x142>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	6861      	ldr	r1, [r4, #4]
 80061b8:	4299      	cmp	r1, r3
 80061ba:	bfde      	ittt	le
 80061bc:	2330      	movle	r3, #48	@ 0x30
 80061be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061c6:	1b92      	subs	r2, r2, r6
 80061c8:	6122      	str	r2, [r4, #16]
 80061ca:	f8cd a000 	str.w	sl, [sp]
 80061ce:	464b      	mov	r3, r9
 80061d0:	aa03      	add	r2, sp, #12
 80061d2:	4621      	mov	r1, r4
 80061d4:	4640      	mov	r0, r8
 80061d6:	f7ff fee7 	bl	8005fa8 <_printf_common>
 80061da:	3001      	adds	r0, #1
 80061dc:	d14a      	bne.n	8006274 <_printf_i+0x1f0>
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	b004      	add	sp, #16
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f043 0320 	orr.w	r3, r3, #32
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	4832      	ldr	r0, [pc, #200]	@ (80062bc <_printf_i+0x238>)
 80061f2:	2778      	movs	r7, #120	@ 0x78
 80061f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	6831      	ldr	r1, [r6, #0]
 80061fc:	061f      	lsls	r7, r3, #24
 80061fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006202:	d402      	bmi.n	800620a <_printf_i+0x186>
 8006204:	065f      	lsls	r7, r3, #25
 8006206:	bf48      	it	mi
 8006208:	b2ad      	uxthmi	r5, r5
 800620a:	6031      	str	r1, [r6, #0]
 800620c:	07d9      	lsls	r1, r3, #31
 800620e:	bf44      	itt	mi
 8006210:	f043 0320 	orrmi.w	r3, r3, #32
 8006214:	6023      	strmi	r3, [r4, #0]
 8006216:	b11d      	cbz	r5, 8006220 <_printf_i+0x19c>
 8006218:	2310      	movs	r3, #16
 800621a:	e7ad      	b.n	8006178 <_printf_i+0xf4>
 800621c:	4826      	ldr	r0, [pc, #152]	@ (80062b8 <_printf_i+0x234>)
 800621e:	e7e9      	b.n	80061f4 <_printf_i+0x170>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e7f6      	b.n	8006218 <_printf_i+0x194>
 800622a:	4616      	mov	r6, r2
 800622c:	e7bd      	b.n	80061aa <_printf_i+0x126>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	6825      	ldr	r5, [r4, #0]
 8006232:	6961      	ldr	r1, [r4, #20]
 8006234:	1d18      	adds	r0, r3, #4
 8006236:	6030      	str	r0, [r6, #0]
 8006238:	062e      	lsls	r6, r5, #24
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	d501      	bpl.n	8006242 <_printf_i+0x1be>
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	e002      	b.n	8006248 <_printf_i+0x1c4>
 8006242:	0668      	lsls	r0, r5, #25
 8006244:	d5fb      	bpl.n	800623e <_printf_i+0x1ba>
 8006246:	8019      	strh	r1, [r3, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	4616      	mov	r6, r2
 800624e:	e7bc      	b.n	80061ca <_printf_i+0x146>
 8006250:	6833      	ldr	r3, [r6, #0]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	6032      	str	r2, [r6, #0]
 8006256:	681e      	ldr	r6, [r3, #0]
 8006258:	6862      	ldr	r2, [r4, #4]
 800625a:	2100      	movs	r1, #0
 800625c:	4630      	mov	r0, r6
 800625e:	f7f9 ffdf 	bl	8000220 <memchr>
 8006262:	b108      	cbz	r0, 8006268 <_printf_i+0x1e4>
 8006264:	1b80      	subs	r0, r0, r6
 8006266:	6060      	str	r0, [r4, #4]
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006272:	e7aa      	b.n	80061ca <_printf_i+0x146>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	4632      	mov	r2, r6
 8006278:	4649      	mov	r1, r9
 800627a:	4640      	mov	r0, r8
 800627c:	47d0      	blx	sl
 800627e:	3001      	adds	r0, #1
 8006280:	d0ad      	beq.n	80061de <_printf_i+0x15a>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	079b      	lsls	r3, r3, #30
 8006286:	d413      	bmi.n	80062b0 <_printf_i+0x22c>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e7a6      	b.n	80061e2 <_printf_i+0x15e>
 8006294:	2301      	movs	r3, #1
 8006296:	4632      	mov	r2, r6
 8006298:	4649      	mov	r1, r9
 800629a:	4640      	mov	r0, r8
 800629c:	47d0      	blx	sl
 800629e:	3001      	adds	r0, #1
 80062a0:	d09d      	beq.n	80061de <_printf_i+0x15a>
 80062a2:	3501      	adds	r5, #1
 80062a4:	68e3      	ldr	r3, [r4, #12]
 80062a6:	9903      	ldr	r1, [sp, #12]
 80062a8:	1a5b      	subs	r3, r3, r1
 80062aa:	42ab      	cmp	r3, r5
 80062ac:	dcf2      	bgt.n	8006294 <_printf_i+0x210>
 80062ae:	e7eb      	b.n	8006288 <_printf_i+0x204>
 80062b0:	2500      	movs	r5, #0
 80062b2:	f104 0619 	add.w	r6, r4, #25
 80062b6:	e7f5      	b.n	80062a4 <_printf_i+0x220>
 80062b8:	08006459 	.word	0x08006459
 80062bc:	0800646a 	.word	0x0800646a

080062c0 <memmove>:
 80062c0:	4288      	cmp	r0, r1
 80062c2:	b510      	push	{r4, lr}
 80062c4:	eb01 0402 	add.w	r4, r1, r2
 80062c8:	d902      	bls.n	80062d0 <memmove+0x10>
 80062ca:	4284      	cmp	r4, r0
 80062cc:	4623      	mov	r3, r4
 80062ce:	d807      	bhi.n	80062e0 <memmove+0x20>
 80062d0:	1e43      	subs	r3, r0, #1
 80062d2:	42a1      	cmp	r1, r4
 80062d4:	d008      	beq.n	80062e8 <memmove+0x28>
 80062d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062de:	e7f8      	b.n	80062d2 <memmove+0x12>
 80062e0:	4402      	add	r2, r0
 80062e2:	4601      	mov	r1, r0
 80062e4:	428a      	cmp	r2, r1
 80062e6:	d100      	bne.n	80062ea <memmove+0x2a>
 80062e8:	bd10      	pop	{r4, pc}
 80062ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062f2:	e7f7      	b.n	80062e4 <memmove+0x24>

080062f4 <_sbrk_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d06      	ldr	r5, [pc, #24]	@ (8006310 <_sbrk_r+0x1c>)
 80062f8:	2300      	movs	r3, #0
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	f7fb fc0e 	bl	8001b20 <_sbrk>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_sbrk_r+0x1a>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_sbrk_r+0x1a>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	2000058c 	.word	0x2000058c

08006314 <_realloc_r>:
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	4607      	mov	r7, r0
 800631a:	4614      	mov	r4, r2
 800631c:	460d      	mov	r5, r1
 800631e:	b921      	cbnz	r1, 800632a <_realloc_r+0x16>
 8006320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	4611      	mov	r1, r2
 8006326:	f7ff bc5b 	b.w	8005be0 <_malloc_r>
 800632a:	b92a      	cbnz	r2, 8006338 <_realloc_r+0x24>
 800632c:	f7ff fbec 	bl	8005b08 <_free_r>
 8006330:	4625      	mov	r5, r4
 8006332:	4628      	mov	r0, r5
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	f000 f81a 	bl	8006370 <_malloc_usable_size_r>
 800633c:	4284      	cmp	r4, r0
 800633e:	4606      	mov	r6, r0
 8006340:	d802      	bhi.n	8006348 <_realloc_r+0x34>
 8006342:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006346:	d8f4      	bhi.n	8006332 <_realloc_r+0x1e>
 8006348:	4621      	mov	r1, r4
 800634a:	4638      	mov	r0, r7
 800634c:	f7ff fc48 	bl	8005be0 <_malloc_r>
 8006350:	4680      	mov	r8, r0
 8006352:	b908      	cbnz	r0, 8006358 <_realloc_r+0x44>
 8006354:	4645      	mov	r5, r8
 8006356:	e7ec      	b.n	8006332 <_realloc_r+0x1e>
 8006358:	42b4      	cmp	r4, r6
 800635a:	4622      	mov	r2, r4
 800635c:	4629      	mov	r1, r5
 800635e:	bf28      	it	cs
 8006360:	4632      	movcs	r2, r6
 8006362:	f7ff fbc3 	bl	8005aec <memcpy>
 8006366:	4629      	mov	r1, r5
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff fbcd 	bl	8005b08 <_free_r>
 800636e:	e7f1      	b.n	8006354 <_realloc_r+0x40>

08006370 <_malloc_usable_size_r>:
 8006370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006374:	1f18      	subs	r0, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfbc      	itt	lt
 800637a:	580b      	ldrlt	r3, [r1, r0]
 800637c:	18c0      	addlt	r0, r0, r3
 800637e:	4770      	bx	lr

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
