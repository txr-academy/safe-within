
Safe_Within.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08003bb8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003bb8  000051ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0e5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002418  00000000  00000000  00014121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00016540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9d  00000000  00000000  000172a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225a8  00000000  00000000  00017d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001128f  00000000  00000000  0003a2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d126e  00000000  00000000  0004b57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c7ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  0011c830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003b40 	.word	0x08003b40

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003b40 	.word	0x08003b40

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <buzzer_on>:
 *      Author: abhir
 */

#include "buzzer.h"

void buzzer_on(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2104      	movs	r1, #4
 8000538:	4802      	ldr	r0, [pc, #8]	@ (8000544 <buzzer_on+0x14>)
 800053a:	f001 f92b 	bl	8001794 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <buzzer_off>:

void buzzer_off(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2104      	movs	r1, #4
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <buzzer_off+0x14>)
 8000552:	f001 f91f 	bl	8001794 <HAL_GPIO_WritePin>

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <gsm_recieve_function>:
uint16_t rx_len = 0;


volatile GSM_State_t gsm_state = GSM_STAGE_WAKE;
// Buffer setup same as before...
void gsm_recieve_function(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_buffer[rx_len], 1);
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <gsm_recieve_function+0x1c>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <gsm_recieve_function+0x20>)
 800056c:	4413      	add	r3, r2
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <gsm_recieve_function+0x24>)
 8000574:	f002 fb11 	bl	8002b9a <HAL_UART_Receive_IT>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000008c 	.word	0x2000008c
 8000580:	20000028 	.word	0x20000028
 8000584:	200000d8 	.word	0x200000d8

08000588 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d104      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	g_time++ ;
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005a2:	6013      	str	r3, [r2, #0]
    }
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40001000 	.word	0x40001000
 80005b4:	20000168 	.word	0x20000168

080005b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	/*
	 * 		Callback for modbus
	 */
	if (huart->Instance == USART2){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a3a      	ldr	r2, [pc, #232]	@ (80006b0 <HAL_UART_RxCpltCallback+0xf8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d114      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x3c>
		uart_flag = 1;
 80005ca:	4b3a      	ldr	r3, [pc, #232]	@ (80006b4 <HAL_UART_RxCpltCallback+0xfc>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
		uart_int_time = g_time;
 80005d0:	4b39      	ldr	r3, [pc, #228]	@ (80006b8 <HAL_UART_RxCpltCallback+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a39      	ldr	r2, [pc, #228]	@ (80006bc <HAL_UART_RxCpltCallback+0x104>)
 80005d6:	6013      	str	r3, [r2, #0]
		modbus_frame[uart_index++] = data;
 80005d8:	4b39      	ldr	r3, [pc, #228]	@ (80006c0 <HAL_UART_RxCpltCallback+0x108>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4938      	ldr	r1, [pc, #224]	@ (80006c0 <HAL_UART_RxCpltCallback+0x108>)
 80005e0:	600a      	str	r2, [r1, #0]
 80005e2:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <HAL_UART_RxCpltCallback+0x10c>)
 80005e4:	7811      	ldrb	r1, [r2, #0]
 80005e6:	4a38      	ldr	r2, [pc, #224]	@ (80006c8 <HAL_UART_RxCpltCallback+0x110>)
 80005e8:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart2, &data, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	4935      	ldr	r1, [pc, #212]	@ (80006c4 <HAL_UART_RxCpltCallback+0x10c>)
 80005ee:	4837      	ldr	r0, [pc, #220]	@ (80006cc <HAL_UART_RxCpltCallback+0x114>)
 80005f0:	f002 fad3 	bl	8002b9a <HAL_UART_Receive_IT>
	}

	/*
	 * 			Callback for gsm
	 */
    if (huart->Instance == huart4.Instance && gsm_state != GSM_STAGE_DONE) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b35      	ldr	r3, [pc, #212]	@ (80006d0 <HAL_UART_RxCpltCallback+0x118>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d152      	bne.n	80006a6 <HAL_UART_RxCpltCallback+0xee>
 8000600:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b04      	cmp	r3, #4
 8000608:	d04d      	beq.n	80006a6 <HAL_UART_RxCpltCallback+0xee>
        rx_len++;
 800060a:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <HAL_UART_RxCpltCallback+0x120>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <HAL_UART_RxCpltCallback+0x120>)
 8000614:	801a      	strh	r2, [r3, #0]
        if (rx_len < RX_BUFFER_SIZE - 1) {
 8000616:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <HAL_UART_RxCpltCallback+0x120>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	2b62      	cmp	r3, #98	@ 0x62
 800061c:	d843      	bhi.n	80006a6 <HAL_UART_RxCpltCallback+0xee>
            rx_buffer[rx_len] = '\0';
 800061e:	4b2e      	ldr	r3, [pc, #184]	@ (80006d8 <HAL_UART_RxCpltCallback+0x120>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <HAL_UART_RxCpltCallback+0x124>)
 8000626:	2100      	movs	r1, #0
 8000628:	5499      	strb	r1, [r3, r2]

            if (strstr((char*)rx_buffer, "\r\nOK\r\n") != NULL) {
 800062a:	492d      	ldr	r1, [pc, #180]	@ (80006e0 <HAL_UART_RxCpltCallback+0x128>)
 800062c:	482b      	ldr	r0, [pc, #172]	@ (80006dc <HAL_UART_RxCpltCallback+0x124>)
 800062e:	f003 fa4d 	bl	8003acc <strstr>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d034      	beq.n	80006a2 <HAL_UART_RxCpltCallback+0xea>
                rx_len = 0; // Clear buffer for next command
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <HAL_UART_RxCpltCallback+0x120>)
 800063a:	2200      	movs	r2, #0
 800063c:	801a      	strh	r2, [r3, #0]

                if (gsm_state == GSM_STAGE_WAKE) {
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10a      	bne.n	800065e <HAL_UART_RxCpltCallback+0xa6>
                    gsm_state = GSM_STAGE_ECHO_OFF;
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
                    // Disable echo after wakeup
                    HAL_UART_Transmit(&huart4, (uint8_t*)"ATE0\r\n", strlen("ATE0\r\n"), HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2206      	movs	r2, #6
 8000654:	4923      	ldr	r1, [pc, #140]	@ (80006e4 <HAL_UART_RxCpltCallback+0x12c>)
 8000656:	481e      	ldr	r0, [pc, #120]	@ (80006d0 <HAL_UART_RxCpltCallback+0x118>)
 8000658:	f002 fa14 	bl	8002a84 <HAL_UART_Transmit>
 800065c:	e021      	b.n	80006a2 <HAL_UART_RxCpltCallback+0xea>

                } else if (gsm_state == GSM_STAGE_ECHO_OFF) {
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10a      	bne.n	800067e <HAL_UART_RxCpltCallback+0xc6>
                    gsm_state = GSM_STAGE_AT_SENT;
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 800066a:	2202      	movs	r2, #2
 800066c:	701a      	strb	r2, [r3, #0]
                    // Send AT to confirm connection once more (optional)
                    HAL_UART_Transmit(&huart4, (uint8_t*)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2204      	movs	r2, #4
 8000674:	491c      	ldr	r1, [pc, #112]	@ (80006e8 <HAL_UART_RxCpltCallback+0x130>)
 8000676:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <HAL_UART_RxCpltCallback+0x118>)
 8000678:	f002 fa04 	bl	8002a84 <HAL_UART_Transmit>
 800067c:	e011      	b.n	80006a2 <HAL_UART_RxCpltCallback+0xea>

                } else if (gsm_state == GSM_STAGE_AT_SENT) {
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10c      	bne.n	80006a2 <HAL_UART_RxCpltCallback+0xea>
                    gsm_state = GSM_STAGE_DIAL;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 800068a:	2203      	movs	r2, #3
 800068c:	701a      	strb	r2, [r3, #0]
                    // Send dial command
                    HAL_UART_Transmit(&huart4,
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2213      	movs	r2, #19
 8000694:	4915      	ldr	r1, [pc, #84]	@ (80006ec <HAL_UART_RxCpltCallback+0x134>)
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <HAL_UART_RxCpltCallback+0x118>)
 8000698:	f002 f9f4 	bl	8002a84 <HAL_UART_Transmit>
                        (uint8_t*)"ATD+917994277760;\r\n",
                        strlen("ATD+917994277760;\r\n"),
                        HAL_MAX_DELAY);
                    gsm_state = GSM_STAGE_DONE;
 800069c:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <HAL_UART_RxCpltCallback+0x11c>)
 800069e:	2204      	movs	r2, #4
 80006a0:	701a      	strb	r2, [r3, #0]
                }
            }
            gsm_recieve_function();
 80006a2:	f7ff ff5d 	bl	8000560 <gsm_recieve_function>
        }
    }
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004400 	.word	0x40004400
 80006b4:	2000016c 	.word	0x2000016c
 80006b8:	20000168 	.word	0x20000168
 80006bc:	20000170 	.word	0x20000170
 80006c0:	20000178 	.word	0x20000178
 80006c4:	20000174 	.word	0x20000174
 80006c8:	20000184 	.word	0x20000184
 80006cc:	20000120 	.word	0x20000120
 80006d0:	200000d8 	.word	0x200000d8
 80006d4:	2000008e 	.word	0x2000008e
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	20000028 	.word	0x20000028
 80006e0:	08003b58 	.word	0x08003b58
 80006e4:	08003b60 	.word	0x08003b60
 80006e8:	08003b68 	.word	0x08003b68
 80006ec:	08003b70 	.word	0x08003b70

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fca4 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f850 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 f944 	bl	8000988 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000700:	f000 f8b8 	bl	8000874 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000704:	f000 f916 	bl	8000934 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000708:	f000 f8ea 	bl	80008e0 <MX_UART4_Init>
//  HAL_Delay(500);
//  buzzer_off();
//  HAL_UART_Transmit(&huart4, (uint8_t*)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
//  gsm_init();

  HAL_TIM_Base_Start_IT(&htim6);
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <main+0x88>)
 800070e:	f001 feab 	bl	8002468 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	4919      	ldr	r1, [pc, #100]	@ (800077c <main+0x8c>)
 8000716:	481a      	ldr	r0, [pc, #104]	@ (8000780 <main+0x90>)
 8000718:	f002 fa3f 	bl	8002b9a <HAL_UART_Receive_IT>
  while (1)
  {
//	  Switch(GPIO_PIN_7);


	   current_state = get_pir_state(pir_1_time,pir_2_time);
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <main+0x94>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <main+0x98>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa9e 	bl	8000c68 <get_pir_state>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <main+0x9c>)
 8000732:	701a      	strb	r2, [r3, #0]
	   if (current_state == ALERT){
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <main+0x9c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d113      	bne.n	8000764 <main+0x74>
	          if (last_state != ALERT){
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <main+0xa0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d004      	beq.n	800074e <main+0x5e>
	        	  alert_start_time = g_time; // set ONCE on entering ALERT
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <main+0xa4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <main+0xa8>)
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	e00f      	b.n	800076e <main+0x7e>
	          }
	          else if ((g_time - alert_start_time) >= 500){
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <main+0xa4>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <main+0xa8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800075c:	d307      	bcc.n	800076e <main+0x7e>
	        	  buzzer_on();
 800075e:	f7ff fee7 	bl	8000530 <buzzer_on>
 8000762:	e004      	b.n	800076e <main+0x7e>
//	              Switch(GPIO_PIN_7);
	          }
	   }

	   else { 							// Not in ALERT
		   alert_start_time = 0;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <main+0xa8>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
	       buzzer_off();
 800076a:	f7ff feed 	bl	8000548 <buzzer_off>
	   }
	   last_state = current_state;
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <main+0x9c>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <main+0xa0>)
 8000774:	701a      	strb	r2, [r3, #0]
	   current_state = get_pir_state(pir_1_time,pir_2_time);
 8000776:	e7d1      	b.n	800071c <main+0x2c>
 8000778:	20000090 	.word	0x20000090
 800077c:	20000174 	.word	0x20000174
 8000780:	20000120 	.word	0x20000120
 8000784:	20000194 	.word	0x20000194
 8000788:	20000198 	.word	0x20000198
 800078c:	2000017c 	.word	0x2000017c
 8000790:	2000017d 	.word	0x2000017d
 8000794:	20000168 	.word	0x20000168
 8000798:	20000180 	.word	0x20000180

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	@ 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f986 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <SystemClock_Config+0xd0>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000800:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000810:	23a8      	movs	r3, #168	@ 0xa8
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fb31 	bl	8001e8c <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000830:	f000 f9e0 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2105      	movs	r1, #5
 8000852:	4618      	mov	r0, r3
 8000854:	f000 ffd0 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085e:	f000 f9c9 	bl	8000bf4 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	@ 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_TIM6_Init+0x64>)
 8000884:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x68>)
 8000886:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <MX_TIM6_Init+0x64>)
 800088a:	2253      	movs	r2, #83	@ 0x53
 800088c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_TIM6_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_TIM6_Init+0x64>)
 8000896:	f242 720f 	movw	r2, #9999	@ 0x270f
 800089a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_TIM6_Init+0x64>)
 800089e:	2280      	movs	r2, #128	@ 0x80
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_TIM6_Init+0x64>)
 80008a4:	f001 fd90 	bl	80023c8 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008ae:	f000 f9a1 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_TIM6_Init+0x64>)
 80008c0:	f002 f800 	bl	80028c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ca:	f000 f993 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000090 	.word	0x20000090
 80008dc:	40001000 	.word	0x40001000

080008e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_UART4_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_UART4_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_UART4_Init+0x4c>)
 80008ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_UART4_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_UART4_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_UART4_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_UART4_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_UART4_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_UART4_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_UART4_Init+0x4c>)
 8000918:	f002 f864 	bl	80029e4 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 f967 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000d8 	.word	0x200000d8
 8000930:	40004c00 	.word	0x40004c00

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 f83a 	bl	80029e4 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f93d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000120 	.word	0x20000120
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	@ 0x30
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a8c      	ldr	r2, [pc, #560]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b8a      	ldr	r3, [pc, #552]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	4b86      	ldr	r3, [pc, #536]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a85      	ldr	r2, [pc, #532]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b83      	ldr	r3, [pc, #524]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b7f      	ldr	r3, [pc, #508]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a7e      	ldr	r2, [pc, #504]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b78      	ldr	r3, [pc, #480]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a77      	ldr	r2, [pc, #476]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b75      	ldr	r3, [pc, #468]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b71      	ldr	r3, [pc, #452]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a70      	ldr	r2, [pc, #448]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a69      	ldr	r2, [pc, #420]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b67      	ldr	r3, [pc, #412]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b63      	ldr	r3, [pc, #396]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a62      	ldr	r2, [pc, #392]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b60      	ldr	r3, [pc, #384]	@ (8000bd8 <MX_GPIO_Init+0x250>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	485d      	ldr	r0, [pc, #372]	@ (8000bdc <MX_GPIO_Init+0x254>)
 8000a68:	f000 fe94 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a72:	485b      	ldr	r0, [pc, #364]	@ (8000be0 <MX_GPIO_Init+0x258>)
 8000a74:	f000 fe8e 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	@ 0x40
 8000a7c:	4859      	ldr	r0, [pc, #356]	@ (8000be4 <MX_GPIO_Init+0x25c>)
 8000a7e:	f000 fe89 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000a82:	2304      	movs	r3, #4
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4850      	ldr	r0, [pc, #320]	@ (8000bdc <MX_GPIO_Init+0x254>)
 8000a9a:	f000 fce7 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	484c      	ldr	r0, [pc, #304]	@ (8000be8 <MX_GPIO_Init+0x260>)
 8000ab6:	f000 fcd9 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aba:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4843      	ldr	r0, [pc, #268]	@ (8000be0 <MX_GPIO_Init+0x258>)
 8000ad4:	f000 fcca 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ad8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aea:	2307      	movs	r3, #7
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	483d      	ldr	r0, [pc, #244]	@ (8000bec <MX_GPIO_Init+0x264>)
 8000af6:	f000 fcb9 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIR_1_Pin PIR_2_Pin */
  GPIO_InitStruct.Pin = PIR_1_Pin|PIR_2_Pin;
 8000afa:	230c      	movs	r3, #12
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4835      	ldr	r0, [pc, #212]	@ (8000be4 <MX_GPIO_Init+0x25c>)
 8000b10:	f000 fcac 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482e      	ldr	r0, [pc, #184]	@ (8000be4 <MX_GPIO_Init+0x25c>)
 8000b2c:	f000 fc9e 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4828      	ldr	r0, [pc, #160]	@ (8000be4 <MX_GPIO_Init+0x25c>)
 8000b44:	f000 fc92 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b48:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4822      	ldr	r0, [pc, #136]	@ (8000bf0 <MX_GPIO_Init+0x268>)
 8000b66:	f000 fc81 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	@ (8000bf0 <MX_GPIO_Init+0x268>)
 8000b80:	f000 fc74 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4814      	ldr	r0, [pc, #80]	@ (8000bec <MX_GPIO_Init+0x264>)
 8000b9a:	f000 fc67 	bl	800146c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f000 fb99 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f000 fbb2 	bl	8001312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2009      	movs	r0, #9
 8000bb4:	f000 fb91 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bb8:	2009      	movs	r0, #9
 8000bba:	f000 fbaa 	bl	8001312 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2017      	movs	r0, #23
 8000bc4:	f000 fb89 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc8:	2017      	movs	r0, #23
 8000bca:	f000 fba2 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	@ 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t pir_2_off_time = 0;

States pir_state;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIR_1_Pin){
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d107      	bne.n	8000c20 <HAL_GPIO_EXTI_Callback+0x20>
		pir_1_flag = FLAG_ON;// indicates pir_1 is ON
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
		pir_1_time = g_time;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c1c:	6013      	str	r3, [r2, #0]
	}

	else if(GPIO_Pin == switch_Pin){
		current_state = ACTIVE;
	}
}
 8000c1e:	e010      	b.n	8000c42 <HAL_GPIO_EXTI_Callback+0x42>
	else if (GPIO_Pin == PIR_2_Pin) {
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d107      	bne.n	8000c36 <HAL_GPIO_EXTI_Callback+0x36>
		pir_2_flag = FLAG_ON;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
		pir_2_time = g_time;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	e005      	b.n	8000c42 <HAL_GPIO_EXTI_Callback+0x42>
	else if(GPIO_Pin == switch_Pin){
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	2b80      	cmp	r3, #128	@ 0x80
 8000c3a:	d102      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0x42>
		current_state = ACTIVE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000018c 	.word	0x2000018c
 8000c54:	20000168 	.word	0x20000168
 8000c58:	20000194 	.word	0x20000194
 8000c5c:	20000190 	.word	0x20000190
 8000c60:	20000198 	.word	0x20000198
 8000c64:	2000017c 	.word	0x2000017c

08000c68 <get_pir_state>:


States get_pir_state(uint32_t pir_1_time, uint32_t pir_2_time){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	  pir_1_off_time = g_time - pir_1_time;
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <get_pir_state+0xcc>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <get_pir_state+0xd0>)
 8000c7c:	6013      	str	r3, [r2, #0]
	  pir_2_off_time = g_time - pir_2_time;
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <get_pir_state+0xcc>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	4a2d      	ldr	r2, [pc, #180]	@ (8000d3c <get_pir_state+0xd4>)
 8000c88:	6013      	str	r3, [r2, #0]
	  if ((pir_1_off_time > 1000) && (pir_2_off_time > 1000)){     // idle state , yellow led
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <get_pir_state+0xd0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c92:	d918      	bls.n	8000cc6 <get_pir_state+0x5e>
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <get_pir_state+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c9c:	d913      	bls.n	8000cc6 <get_pir_state+0x5e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4827      	ldr	r0, [pc, #156]	@ (8000d40 <get_pir_state+0xd8>)
 8000ca4:	f000 fd76 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <get_pir_state+0xd8>)
 8000cae:	f000 fd71 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cb8:	4821      	ldr	r0, [pc, #132]	@ (8000d40 <get_pir_state+0xd8>)
 8000cba:	f000 fd6b 	bl	8001794 <HAL_GPIO_WritePin>
		  pir_state = IDLE;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <get_pir_state+0xdc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e030      	b.n	8000d28 <get_pir_state+0xc0>

	  }

	  else if ((pir_1_off_time > 1000) && (pir_2_off_time < 500)){      // emergency, red
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <get_pir_state+0xd0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cce:	d918      	bls.n	8000d02 <get_pir_state+0x9a>
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <get_pir_state+0xd4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000cd8:	d213      	bcs.n	8000d02 <get_pir_state+0x9a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4818      	ldr	r0, [pc, #96]	@ (8000d40 <get_pir_state+0xd8>)
 8000ce0:	f000 fd58 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2180      	movs	r1, #128	@ 0x80
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <get_pir_state+0xd8>)
 8000cea:	f000 fd53 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cf4:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <get_pir_state+0xd8>)
 8000cf6:	f000 fd4d 	bl	8001794 <HAL_GPIO_WritePin>
		  pir_state = ALERT;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <get_pir_state+0xdc>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	e012      	b.n	8000d28 <get_pir_state+0xc0>
	  }
	  else {     // ((pir_1_off_time < 500) && (pir_2_off_time < 500))     active state, blue
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <get_pir_state+0xd8>)
 8000d08:	f000 fd44 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2180      	movs	r1, #128	@ 0x80
 8000d10:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <get_pir_state+0xd8>)
 8000d12:	f000 fd3f 	bl	8001794 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <get_pir_state+0xd8>)
 8000d1e:	f000 fd39 	bl	8001794 <HAL_GPIO_WritePin>
		  pir_state = ACTIVE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <get_pir_state+0xdc>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
//	  else{
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		// error state, all leds on
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//	  }
	  return pir_state;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <get_pir_state+0xdc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000168 	.word	0x20000168
 8000d38:	2000019c 	.word	0x2000019c
 8000d3c:	200001a0 	.word	0x200001a0
 8000d40:	40020400 	.word	0x40020400
 8000d44:	200001a4 	.word	0x200001a4

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	@ (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d115      	bne.n	8000dd6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_TIM_Base_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <HAL_TIM_Base_MspInit+0x4c>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_TIM_Base_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2036      	movs	r0, #54	@ 0x36
 8000dcc:	f000 fa85 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd0:	2036      	movs	r0, #54	@ 0x36
 8000dd2:	f000 fa9e 	bl	8001312 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40001000 	.word	0x40001000
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef0 <HAL_UART_MspInit+0x108>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d135      	bne.n	8000e76 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b39      	ldr	r3, [pc, #228]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a38      	ldr	r2, [pc, #224]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b36      	ldr	r3, [pc, #216]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b32      	ldr	r3, [pc, #200]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e54:	2308      	movs	r3, #8
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4826      	ldr	r0, [pc, #152]	@ (8000ef8 <HAL_UART_MspInit+0x110>)
 8000e60:	f000 fb04 	bl	800146c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2034      	movs	r0, #52	@ 0x34
 8000e6a:	f000 fa36 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e6e:	2034      	movs	r0, #52	@ 0x34
 8000e70:	f000 fa4f 	bl	8001312 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e74:	e038      	b.n	8000ee8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_UART_MspInit+0x114>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d133      	bne.n	8000ee8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a13      	ldr	r2, [pc, #76]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000eb8:	2360      	movs	r3, #96	@ 0x60
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <HAL_UART_MspInit+0x118>)
 8000ed4:	f000 faca 	bl	800146c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2026      	movs	r0, #38	@ 0x26
 8000ede:	f000 f9fc 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee2:	2026      	movs	r0, #38	@ 0x26
 8000ee4:	f000 fa15 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	@ 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004c00 	.word	0x40004c00
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40020c00 	.word	0x40020c00

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8c3 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_1_Pin);
 8000f66:	2004      	movs	r0, #4
 8000f68:	f000 fc2e 	bl	80017c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_2_Pin);
 8000f74:	2008      	movs	r0, #8
 8000f76:	f000 fc27 	bl	80017c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(switch_Pin);
 8000f82:	2080      	movs	r0, #128	@ 0x80
 8000f84:	f000 fc20 	bl	80017c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USART2_IRQHandler+0x10>)
 8000f92:	f001 fe27 	bl	8002be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000120 	.word	0x20000120

08000fa0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <UART4_IRQHandler+0x10>)
 8000fa6:	f001 fe1d 	bl	8002be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000d8 	.word	0x200000d8

08000fb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM6_DAC_IRQHandler+0x10>)
 8000fba:	f001 fac5 	bl	8002548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000090 	.word	0x20000090

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 fd6d 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fb67 	bl	80006f0 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001030:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8001034:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001038:	200001ac 	.word	0x200001ac

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f92b 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fe68 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f943 	bl	800132e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f90b 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200001a8 	.word	0x200001a8

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200001a8 	.word	0x200001a8

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff feda 	bl	800110c <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d008      	beq.n	8001378 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e052      	b.n	800141e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0216 	bic.w	r2, r2, #22
 8001386:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001396:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_DMA_Abort+0x62>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0208 	bic.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c8:	e013      	b.n	80013f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ca:	f7ff fe9f 	bl	800110c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d90c      	bls.n	80013f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e015      	b.n	800141e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e4      	bne.n	80013ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	223f      	movs	r2, #63	@ 0x3f
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d004      	beq.n	8001444 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2280      	movs	r2, #128	@ 0x80
 800143e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00c      	b.n	800145e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2205      	movs	r2, #5
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e165      	b.n	8001754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8154 	bne.w	800174e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80ae 	beq.w	800174e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <HAL_GPIO_Init+0x300>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a5c      	ldr	r2, [pc, #368]	@ (800176c <HAL_GPIO_Init+0x300>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	@ (8001774 <HAL_GPIO_Init+0x308>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <HAL_GPIO_Init+0x21a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4e      	ldr	r2, [pc, #312]	@ (8001778 <HAL_GPIO_Init+0x30c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_Init+0x216>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4d      	ldr	r2, [pc, #308]	@ (800177c <HAL_GPIO_Init+0x310>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x212>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4c      	ldr	r2, [pc, #304]	@ (8001780 <HAL_GPIO_Init+0x314>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <HAL_GPIO_Init+0x318>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x20a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4a      	ldr	r2, [pc, #296]	@ (8001788 <HAL_GPIO_Init+0x31c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x206>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a49      	ldr	r2, [pc, #292]	@ (800178c <HAL_GPIO_Init+0x320>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x202>
 800166a:	2306      	movs	r3, #6
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 800166e:	2307      	movs	r3, #7
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x21c>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	@ (8001770 <HAL_GPIO_Init+0x304>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a31      	ldr	r2, [pc, #196]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <HAL_GPIO_Init+0x324>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_GPIO_Init+0x324>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_GPIO_Init+0x324>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae96 	bls.w	8001488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	@ 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa0a 	bl	8000c00 <HAL_GPIO_EXTI_Callback>
  }
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0cc      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b68      	ldr	r3, [pc, #416]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d90c      	bls.n	8001834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b65      	ldr	r3, [pc, #404]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800186e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d044      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d119      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e067      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b37      	ldr	r3, [pc, #220]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4934      	ldr	r1, [pc, #208]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fc10 	bl	800110c <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff fc0c 	bl	800110c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e04f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d20c      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f855 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fb70 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08003b84 	.word	0x08003b84
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0a9b      	lsrs	r3, r3, #10
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	@ (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08003b94 	.word	0x08003b94

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffdc 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0b5b      	lsrs	r3, r3, #13
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	@ (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08003b94 	.word	0x08003b94

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a30:	b0ae      	sub	sp, #184	@ 0xb8
 8001a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a52:	4bcb      	ldr	r3, [pc, #812]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	f200 8206 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x440>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a9d 	.word	0x08001a9d
 8001a6c:	08001e6d 	.word	0x08001e6d
 8001a70:	08001e6d 	.word	0x08001e6d
 8001a74:	08001e6d 	.word	0x08001e6d
 8001a78:	08001aa5 	.word	0x08001aa5
 8001a7c:	08001e6d 	.word	0x08001e6d
 8001a80:	08001e6d 	.word	0x08001e6d
 8001a84:	08001e6d 	.word	0x08001e6d
 8001a88:	08001aad 	.word	0x08001aad
 8001a8c:	08001e6d 	.word	0x08001e6d
 8001a90:	08001e6d 	.word	0x08001e6d
 8001a94:	08001e6d 	.word	0x08001e6d
 8001a98:	08001c9d 	.word	0x08001c9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4bb9      	ldr	r3, [pc, #740]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001aa2:	e1e7      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa4:	4bb8      	ldr	r3, [pc, #736]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001aaa:	e1e3      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4bb4      	ldr	r3, [pc, #720]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab8:	4bb1      	ldr	r3, [pc, #708]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d071      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4bae      	ldr	r3, [pc, #696]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ad0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001aea:	4622      	mov	r2, r4
 8001aec:	462b      	mov	r3, r5
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	0159      	lsls	r1, r3, #5
 8001af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afc:	0150      	lsls	r0, r2, #5
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4621      	mov	r1, r4
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b08:	4629      	mov	r1, r5
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4641      	mov	r1, r8
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4641      	mov	r1, r8
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1a51      	subs	r1, r2, r1
 8001b2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb63 0301 	sbc.w	r3, r3, r1
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b44:	4649      	mov	r1, r9
 8001b46:	00cb      	lsls	r3, r1, #3
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b4e:	4641      	mov	r1, r8
 8001b50:	00ca      	lsls	r2, r1, #3
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	4622      	mov	r2, r4
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b5e:	462b      	mov	r3, r5
 8001b60:	460a      	mov	r2, r1
 8001b62:	eb42 0303 	adc.w	r3, r2, r3
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b74:	4629      	mov	r1, r5
 8001b76:	024b      	lsls	r3, r1, #9
 8001b78:	4621      	mov	r1, r4
 8001b7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b7e:	4621      	mov	r1, r4
 8001b80:	024a      	lsls	r2, r1, #9
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b98:	f7fe fb34 	bl	8000204 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ba6:	e067      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bb4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001bca:	4622      	mov	r2, r4
 8001bcc:	462b      	mov	r3, r5
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	0159      	lsls	r1, r3, #5
 8001bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bdc:	0150      	lsls	r0, r2, #5
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4621      	mov	r1, r4
 8001be4:	1a51      	subs	r1, r2, r1
 8001be6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001be8:	4629      	mov	r1, r5
 8001bea:	eb63 0301 	sbc.w	r3, r3, r1
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	018b      	lsls	r3, r1, #6
 8001c00:	4641      	mov	r1, r8
 8001c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c06:	4641      	mov	r1, r8
 8001c08:	018a      	lsls	r2, r1, #6
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c10:	4649      	mov	r1, r9
 8001c12:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c2a:	4692      	mov	sl, r2
 8001c2c:	469b      	mov	fp, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	eb1a 0303 	adds.w	r3, sl, r3
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	462b      	mov	r3, r5
 8001c38:	eb4b 0303 	adc.w	r3, fp, r3
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	028b      	lsls	r3, r1, #10
 8001c4e:	4621      	mov	r1, r4
 8001c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c54:	4621      	mov	r1, r4
 8001c56:	028a      	lsls	r2, r1, #10
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c60:	2200      	movs	r2, #0
 8001c62:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c64:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c6a:	f7fe facb 	bl	8000204 <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4613      	mov	r3, r2
 8001c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c9a:	e0eb      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c9c:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d06b      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb4:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	2200      	movs	r2, #0
 8001cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cc8:	2300      	movs	r3, #0
 8001cca:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ccc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	0159      	lsls	r1, r3, #5
 8001cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce2:	0150      	lsls	r0, r2, #5
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4621      	mov	r1, r4
 8001cea:	1a51      	subs	r1, r2, r1
 8001cec:	61b9      	str	r1, [r7, #24]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d02:	4659      	mov	r1, fp
 8001d04:	018b      	lsls	r3, r1, #6
 8001d06:	4651      	mov	r1, sl
 8001d08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	018a      	lsls	r2, r1, #6
 8001d10:	4651      	mov	r1, sl
 8001d12:	ebb2 0801 	subs.w	r8, r2, r1
 8001d16:	4659      	mov	r1, fp
 8001d18:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d30:	4690      	mov	r8, r2
 8001d32:	4699      	mov	r9, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	eb18 0303 	adds.w	r3, r8, r3
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	eb49 0303 	adc.w	r3, r9, r3
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d50:	4629      	mov	r1, r5
 8001d52:	024b      	lsls	r3, r1, #9
 8001d54:	4621      	mov	r1, r4
 8001d56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	024a      	lsls	r2, r1, #9
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d66:	2200      	movs	r2, #0
 8001d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d70:	f7fe fa48 	bl	8000204 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d7e:	e065      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x420>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	4611      	mov	r1, r2
 8001d98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d9e:	2300      	movs	r3, #0
 8001da0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001da2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001da6:	4642      	mov	r2, r8
 8001da8:	464b      	mov	r3, r9
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dd8:	4659      	mov	r1, fp
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de2:	4651      	mov	r1, sl
 8001de4:	018a      	lsls	r2, r1, #6
 8001de6:	4651      	mov	r1, sl
 8001de8:	1a54      	subs	r4, r2, r1
 8001dea:	4659      	mov	r1, fp
 8001dec:	eb63 0501 	sbc.w	r5, r3, r1
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	00eb      	lsls	r3, r5, #3
 8001dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfe:	00e2      	lsls	r2, r4, #3
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	18e3      	adds	r3, r4, r3
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1e:	4629      	mov	r1, r5
 8001e20:	028b      	lsls	r3, r1, #10
 8001e22:	4621      	mov	r1, r4
 8001e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e28:	4621      	mov	r1, r4
 8001e2a:	028a      	lsls	r2, r1, #10
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e34:	2200      	movs	r2, #0
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e3e:	f7fe f9e1 	bl	8000204 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4613      	mov	r3, r2
 8001e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0f1b      	lsrs	r3, r3, #28
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e6a:	e003      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	37b8      	adds	r7, #184	@ 0xb8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400

08001e8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e28d      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8083 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eac:	4b94      	ldr	r3, [pc, #592]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d019      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001eb8:	4b91      	ldr	r3, [pc, #580]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b84      	ldr	r3, [pc, #528]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x124>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e25a      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x90>
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xcc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0xb4>
 8001f26:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b73      	ldr	r3, [pc, #460]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a72      	ldr	r2, [pc, #456]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xcc>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6b      	ldr	r2, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f8d4 	bl	800110c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f8d0 	bl	800110c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e21f      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b61      	ldr	r3, [pc, #388]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f8c0 	bl	800110c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f8bc 	bl	800110c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e20b      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b57      	ldr	r3, [pc, #348]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x104>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06f      	beq.n	800209e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fbe:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d017      	beq.n	8001ffa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fca:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
        || \
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x186>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1d3      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_RCC_OscConfig+0x278>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f869 	bl	800110c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff f865 	bl	800110c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1b4      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_OscConfig+0x278>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f848 	bl	800110c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff f844 	bl	800110c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e193      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f828 	bl	800110c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff f824 	bl	800110c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e173      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x274>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x234>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff f811 	bl	800110c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff f80d 	bl	800110c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e15c      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b8a      	ldr	r3, [pc, #552]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b83      	ldr	r3, [pc, #524]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a7e      	ldr	r2, [pc, #504]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b7c      	ldr	r3, [pc, #496]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b79      	ldr	r3, [pc, #484]	@ (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	@ (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe ffcd 	bl	800110c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe ffc9 	bl	800110c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e118      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_RCC_OscConfig+0x4b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x31e>
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a65      	ldr	r2, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x358>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x340>
 80021b2:	4b61      	ldr	r3, [pc, #388]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	4a60      	ldr	r2, [pc, #384]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021be:	4b5e      	ldr	r3, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x358>
 80021cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	4a59      	ldr	r2, [pc, #356]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d8:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe ff8e 	bl	800110c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe ff8a 	bl	800110c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0d7      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b4b      	ldr	r3, [pc, #300]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x368>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe ff78 	bl	800110c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe ff74 	bl	800110c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0c1      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	4a3a      	ldr	r2, [pc, #232]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ad 	beq.w	80023b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d145      	bne.n	80022fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_RCC_OscConfig+0x4b4>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe ff48 	bl	800110c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe ff44 	bl	800110c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e093      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	491b      	ldr	r1, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x4b4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe ff19 	bl	800110c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe ff15 	bl	800110c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e064      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x452>
 80022fc:	e05c      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_RCC_OscConfig+0x4b4>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe ff02 	bl	800110c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fefe 	bl	800110c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04d      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x480>
 800232a:	e045      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e040      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000
 8002340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_RCC_OscConfig+0x538>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d030      	beq.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d122      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800237a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	4293      	cmp	r3, r2
 800237e:	d119      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d10f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fcd2 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 f9b6 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e04e      	b.n	800251e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a23      	ldr	r2, [pc, #140]	@ (800252c <HAL_TIM_Base_Start_IT+0xc4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d022      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024aa:	d01d      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002530 <HAL_TIM_Base_Start_IT+0xc8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d018      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002534 <HAL_TIM_Base_Start_IT+0xcc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_TIM_Base_Start_IT+0xd0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00e      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <HAL_TIM_Base_Start_IT+0xd4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_TIM_Base_Start_IT+0xd8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x80>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a18      	ldr	r2, [pc, #96]	@ (8002544 <HAL_TIM_Base_Start_IT+0xdc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d111      	bne.n	800250c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d010      	beq.n	800251c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	e007      	b.n	800251c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40010400 	.word	0x40010400
 8002540:	40014000 	.word	0x40014000
 8002544:	40001800 	.word	0x40001800

08002548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8d2 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8c4 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f8d5 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0204 	mvn.w	r2, #4
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8ac 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f89e 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8af 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d020      	beq.n	8002644 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0208 	mvn.w	r2, #8
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2204      	movs	r2, #4
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f886 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f878 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f889 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d020      	beq.n	8002690 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0210 	mvn.w	r2, #16
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2208      	movs	r2, #8
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f860 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f852 	bl	8002728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f863 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ff6a 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f97c 	bl	80029d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f834 	bl	8002764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0220 	mvn.w	r2, #32
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f94e 	bl	80029bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a40      	ldr	r2, [pc, #256]	@ (800289c <TIM_Base_SetConfig+0x124>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3f      	ldr	r2, [pc, #252]	@ (80028a0 <TIM_Base_SetConfig+0x128>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3e      	ldr	r2, [pc, #248]	@ (80028a4 <TIM_Base_SetConfig+0x12c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x40>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a32      	ldr	r2, [pc, #200]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d02b      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d8:	d027      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2f      	ldr	r2, [pc, #188]	@ (800289c <TIM_Base_SetConfig+0x124>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d023      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	@ (80028a0 <TIM_Base_SetConfig+0x128>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01f      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <TIM_Base_SetConfig+0x12c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01b      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d017      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <TIM_Base_SetConfig+0x134>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <TIM_Base_SetConfig+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00f      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <TIM_Base_SetConfig+0x13c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a28      	ldr	r2, [pc, #160]	@ (80028b8 <TIM_Base_SetConfig+0x140>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a27      	ldr	r2, [pc, #156]	@ (80028bc <TIM_Base_SetConfig+0x144>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_Base_SetConfig+0xb2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <TIM_Base_SetConfig+0x148>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d108      	bne.n	800283c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <TIM_Base_SetConfig+0x120>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0xf2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <TIM_Base_SetConfig+0x130>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d103      	bne.n	8002872 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40014800 	.word	0x40014800
 80028b8:	40001800 	.word	0x40001800
 80028bc:	40001c00 	.word	0x40001c00
 80028c0:	40002000 	.word	0x40002000

080028c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d8:	2302      	movs	r3, #2
 80028da:	e05a      	b.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d022      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002928:	d01d      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d018      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00e      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10c      	bne.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800296c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4313      	orrs	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40001800 	.word	0x40001800

080029bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e042      	b.n	8002a7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f9ec 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	@ 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fdd3 	bl	80035d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d175      	bne.n	8002b90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_UART_Transmit+0x2c>
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2221      	movs	r2, #33	@ 0x21
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ac2:	f7fe fb23 	bl	800110c <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x6c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e02e      	b.n	8002b58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	@ 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fb37 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e03a      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3302      	adds	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e007      	b.n	8002b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1cb      	bne.n	8002afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2140      	movs	r1, #64	@ 0x40
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fb03 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d112      	bne.n	8002bda <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_Receive_IT+0x26>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e00b      	b.n	8002bdc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fb2a 	bl	800322a <UART_Start_Receive_IT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	e000      	b.n	8002bdc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_IRQHandler>:
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ba      	sub	sp, #232	@ 0xe8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
  }
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

 8002c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_UART_IRQHandler+0x66>
  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
  {
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_UART_IRQHandler+0x66>
 8002c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_UART_IRQHandler+0x66>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fc07 	bl	8003456 <UART_Receive_IT>
    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
 8002c48:	e273      	b.n	8003132 <HAL_UART_IRQHandler+0x54e>
    if (huart->hdmarx != NULL)
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80de 	beq.w	8002e10 <HAL_UART_IRQHandler+0x22c>
 8002c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_UART_IRQHandler+0x8a>

 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80d1 	beq.w	8002e10 <HAL_UART_IRQHandler+0x22c>
      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
      {
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_UART_IRQHandler+0xae>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0xae>
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    else
    {
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xd2>
 8002c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xd2>
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_UART_IRQHandler+0xf6>
 8002cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_UART_IRQHandler+0xf6>

      /* As no DMA to be aborted, call directly user Abort complete callback */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d011      	beq.n	8002d0a <HAL_UART_IRQHandler+0x126>
 8002ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_UART_IRQHandler+0x11a>
      /* Call legacy weak Abort Receive Complete Callback */
 8002cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_UART_IRQHandler+0x126>
      HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f043 0208 	orr.w	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }
  else
  {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 820a 	beq.w	8003128 <HAL_UART_IRQHandler+0x544>
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;

 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x14e>
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_UART_IRQHandler+0x14e>
    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb92 	bl	8003456 <UART_Receive_IT>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    huart->AbortReceiveCpltCallback(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_UART_IRQHandler+0x17a>
 8002d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d04f      	beq.n	8002dfe <HAL_UART_IRQHandler+0x21a>
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa9d 	bl	800329e <UART_EndRxTransfer>

  return HAL_OK;
}
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d141      	bne.n	8002df6 <HAL_UART_IRQHandler+0x212>

/**
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3314      	adds	r3, #20
 8002d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1d9      	bne.n	8002d72 <HAL_UART_IRQHandler+0x18e>
  * @brief  This function handles UART interrupt request.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <HAL_UART_IRQHandler+0x20a>
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dca:	4a8a      	ldr	r2, [pc, #552]	@ (8002ff4 <HAL_UART_IRQHandler+0x410>)
 8002dcc:	651a      	str	r2, [r3, #80]	@ 0x50
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fb27 	bl	8001426 <HAL_DMA_Abort_IT>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_UART_IRQHandler+0x228>
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
  uint32_t errorflags = 0x00U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002de8:	4610      	mov	r0, r2
 8002dea:	4798      	blx	r3
}
 8002dec:	e00e      	b.n	8002e0c <HAL_UART_IRQHandler+0x228>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
      return;
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9ac 	bl	800314c <HAL_UART_ErrorCallback>
}
 8002df4:	e00a      	b.n	8002e0c <HAL_UART_IRQHandler+0x228>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
    }
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9a8 	bl	800314c <HAL_UART_ErrorCallback>
}
 8002dfc:	e006      	b.n	8002e0c <HAL_UART_IRQHandler+0x228>
    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
    }

 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9a4 	bl	800314c <HAL_UART_ErrorCallback>
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }
 8002e0a:	e18d      	b.n	8003128 <HAL_UART_IRQHandler+0x544>
}
 8002e0c:	bf00      	nop
    }
 8002e0e:	e18b      	b.n	8003128 <HAL_UART_IRQHandler+0x544>

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
    {
      /* UART in mode Receiver -----------------------------------------------*/
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 8167 	bne.w	80030e8 <HAL_UART_IRQHandler+0x504>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8160 	beq.w	80030e8 <HAL_UART_IRQHandler+0x504>
      {
 8002e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8159 	beq.w	80030e8 <HAL_UART_IRQHandler+0x504>
        UART_Receive_IT(huart);
      }
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	f040 80ce 	bne.w	8002ff8 <HAL_UART_IRQHandler+0x414>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        UART_EndRxTransfer(huart);
 8002e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a9 	beq.w	8002fc4 <HAL_UART_IRQHandler+0x3e0>

 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	f080 80a2 	bcs.w	8002fc4 <HAL_UART_IRQHandler+0x3e0>
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e86:	85da      	strh	r2, [r3, #46]	@ 0x2e
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

          /* Abort the UART DMA Rx stream */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e92:	f000 8088 	beq.w	8002fa6 <HAL_UART_IRQHandler+0x3c2>
          if (huart->hdmarx != NULL)
          {
            /* Set the UART DMA Abort callback :
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1d9      	bne.n	8002e96 <HAL_UART_IRQHandler+0x2b2>
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e1      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x2fe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x33a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
            }
          }
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          else
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Call user error callback */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f76:	f023 0310 	bic.w	r3, r3, #16
 8002f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e3      	bne.n	8002f64 <HAL_UART_IRQHandler+0x380>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f9d0 	bl	8001346 <HAL_DMA_Abort>
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          }
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8cf 	bl	8003160 <HAL_UARTEx_RxEventCallback>
      }
    }
    return;
  } /* End if some error occurs */

  /* Check current reception Mode :
 8002fc2:	e0b3      	b.n	800312c <HAL_UART_IRQHandler+0x548>
      else
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f040 80ad 	bne.w	800312c <HAL_UART_IRQHandler+0x548>
        /* Non Blocking error : transfer could go on.
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fdc:	f040 80a6 	bne.w	800312c <HAL_UART_IRQHandler+0x548>
        huart->ErrorCallback(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34
      }
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f8b7 	bl	8003160 <HAL_UARTEx_RxEventCallback>
  /* Check current reception Mode :
 8002ff2:	e09b      	b.n	800312c <HAL_UART_IRQHandler+0x548>
 8002ff4:	08003365 	.word	0x08003365
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      && ((isrflags & USART_SR_IDLE) != 0U)
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);

 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003000:	b29b      	uxth	r3, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    /* Check if DMA mode is enabled in UART */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 808e 	beq.w	8003130 <HAL_UART_IRQHandler+0x54c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8089 	beq.w	8003130 <HAL_UART_IRQHandler+0x54c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003034:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003042:	647a      	str	r2, [r7, #68]	@ 0x44
 8003044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e3      	bne.n	800301e <HAL_UART_IRQHandler+0x43a>
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	623b      	str	r3, [r7, #32]
   return(result);
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800307a:	633a      	str	r2, [r7, #48]	@ 0x30
 800307c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e3      	bne.n	8003056 <HAL_UART_IRQHandler+0x472>
      if ((nb_remaining_rx_data > 0U)
          && (nb_remaining_rx_data < huart->RxXferSize))
      {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        /* Reception is not complete */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
        huart->RxXferCount = nb_remaining_rx_data;

 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030c0:	61fa      	str	r2, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	617b      	str	r3, [r7, #20]
   return(result);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e3      	bne.n	800309c <HAL_UART_IRQHandler+0x4b8>
        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

 80030da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f83d 	bl	8003160 <HAL_UARTEx_RxEventCallback>
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e6:	e023      	b.n	8003130 <HAL_UART_IRQHandler+0x54c>

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_UART_IRQHandler+0x524>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_UART_IRQHandler+0x524>
        }

 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f940 	bl	8003386 <UART_Transmit_IT>
        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
 8003106:	e014      	b.n	8003132 <HAL_UART_IRQHandler+0x54e>
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <HAL_UART_IRQHandler+0x54e>
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_UART_IRQHandler+0x54e>
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f980 	bl	8003426 <UART_EndTransmit_IT>
#else
 8003126:	e004      	b.n	8003132 <HAL_UART_IRQHandler+0x54e>
    }
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_UART_IRQHandler+0x54e>
  /* Check current reception Mode :
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_UART_IRQHandler+0x54e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	bf00      	nop
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003132:	37e8      	adds	r7, #232	@ 0xe8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_TxCpltCallback>:
      {
        /* If DMA is in Circular mode, Idle event is to be reported to user
           even if occurring after a Transfer Complete event from DMA */
        if (nb_remaining_rx_data == huart->RxXferSize)
        {
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
          {
            /* Initialize type of RxEvent that correspond to RxEvent callback execution;
               In this case, Rx Event type is Idle Event */
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_ErrorCallback>:
  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
  {
    UART_Transmit_IT(huart);
    return;
  }
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UARTEx_RxEventCallback>:
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
  /* Prevent unused argument(s) compilation warning */
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}

 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
 8003188:	e03b      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d037      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 8003192:	f7fd ffbb 	bl	800110c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x34>

        return HAL_TIMEOUT;
      }
 80031a8:	2303      	movs	r3, #3
 80031aa:	e03a      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d023      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d020      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d01d      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
        {
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d116      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8a>
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);

 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]
          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);

 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f857 	bl	800329e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;

 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2208      	movs	r2, #8
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
        }
 80031fe:	2301      	movs	r3, #1
 8003200:	e00f      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d0b4      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
}
 8003220:	2300      	movs	r3, #0

 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <UART_Start_Receive_IT>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr = pData;
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	4613      	mov	r3, r2
 8003236:	80fb      	strh	r3, [r7, #6]
  huart->RxXferSize = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferCount = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	859a      	strh	r2, [r3, #44]	@ 0x2c

 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44

 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2222      	movs	r2, #34	@ 0x22
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
  {
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <UART_Start_Receive_IT+0x46>
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
  }
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800326e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	615a      	str	r2, [r3, #20]
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
}
 8003290:	2300      	movs	r3, #0

 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <UART_EndRxTransfer>:
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 800329e:	b480      	push	{r7}
 80032a0:	b095      	sub	sp, #84	@ 0x54
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e5      	bne.n	80032a6 <UART_EndRxTransfer+0x8>

 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3314      	adds	r3, #20
 80032e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <UART_EndRxTransfer+0x3c>
  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
  {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	2b01      	cmp	r3, #1
 8003314:	d119      	bne.n	800334a <UART_EndRxTransfer+0xac>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	60bb      	str	r3, [r7, #8]
   return(result);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	647b      	str	r3, [r7, #68]	@ 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003336:	61ba      	str	r2, [r7, #24]
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	613b      	str	r3, [r7, #16]
   return(result);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_EndRxTransfer+0x78>

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
}
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30

 8003358:	bf00      	nop
 800335a:	3754      	adds	r7, #84	@ 0x54
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <UART_DMAAbortOnError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  huart->RxXferCount = 0x00U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	60fb      	str	r3, [r7, #12]

 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	85da      	strh	r2, [r3, #46]	@ 0x2e
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f7ff fee7 	bl	800314c <HAL_UART_ErrorCallback>
}

 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <UART_Transmit_IT>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b21      	cmp	r3, #33	@ 0x21
 8003398:	d13e      	bne.n	8003418 <UART_Transmit_IT+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a2:	d114      	bne.n	80033ce <UART_Transmit_IT+0x48>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d110      	bne.n	80033ce <UART_Transmit_IT+0x48>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	60fb      	str	r3, [r7, #12]
      huart->pTxBuffPtr += 2U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c0:	605a      	str	r2, [r3, #4]
    }
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	1c9a      	adds	r2, r3, #2
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]
 80033cc:	e008      	b.n	80033e0 <UART_Transmit_IT+0x5a>
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
    }
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6211      	str	r1, [r2, #32]
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]

    if (--huart->TxXferCount == 0U)
    {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4619      	mov	r1, r3
 80033ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10f      	bne.n	8003414 <UART_Transmit_IT+0x8e>
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);

 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003402:	60da      	str	r2, [r3, #12]
      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
    }
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003412:	60da      	str	r2, [r3, #12]
    return HAL_OK;
  }
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <UART_Transmit_IT+0x94>
  else
  {
    return HAL_BUSY;
  }
 8003418:	2302      	movs	r3, #2
}

 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <UART_EndTransmit_IT>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);

 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343c:	60da      	str	r2, [r3, #12]
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;

 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe76 	bl	8003138 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800344c:	2300      	movs	r3, #0

 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_Receive_IT>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint8_t  *pdata8bits = NULL;
 8003456:	b580      	push	{r7, lr}
 8003458:	b08c      	sub	sp, #48	@ 0x30
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  uint16_t *pdata16bits = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c

 8003462:	2300      	movs	r3, #0
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b22      	cmp	r3, #34	@ 0x22
 8003470:	f040 80aa 	bne.w	80035c8 <UART_Receive_IT+0x172>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	d115      	bne.n	80034aa <UART_Receive_IT+0x54>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d111      	bne.n	80034aa <UART_Receive_IT+0x54>
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	62bb      	str	r3, [r7, #40]	@ 0x28
      huart->pRxBuffPtr += 2U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	b29a      	uxth	r2, r3
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	801a      	strh	r2, [r3, #0]
    }
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034a8:	e024      	b.n	80034f4 <UART_Receive_IT+0x9e>
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
      /* Unused pdata16bits */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
      {
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d007      	beq.n	80034ca <UART_Receive_IT+0x74>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <UART_Receive_IT+0x82>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <UART_Receive_IT+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
      }
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e008      	b.n	80034ea <UART_Receive_IT+0x94>
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
    }
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (--huart->RxXferCount == 0U)
    {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003504:	2b00      	cmp	r3, #0
 8003506:	d15d      	bne.n	80035c4 <UART_Receive_IT+0x16e>
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0220 	bic.w	r2, r2, #32
 8003516:	60da      	str	r2, [r3, #12]
      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);

 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003526:	60da      	str	r2, [r3, #12]
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	615a      	str	r2, [r3, #20]
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;

 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	@ 0x34
      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	2b01      	cmp	r3, #1
 800354c:	d135      	bne.n	80035ba <UART_Receive_IT+0x164>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	613b      	str	r3, [r7, #16]
   return(result);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f023 0310 	bic.w	r3, r3, #16
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	623a      	str	r2, [r7, #32]
 8003576:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	69f9      	ldr	r1, [r7, #28]
 800357a:	6a3a      	ldr	r2, [r7, #32]
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	61bb      	str	r3, [r7, #24]
   return(result);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e5      	bne.n	8003554 <UART_Receive_IT+0xfe>
        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
        {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b10      	cmp	r3, #16
 8003594:	d10a      	bne.n	80035ac <UART_Receive_IT+0x156>
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
        }
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fdd4 	bl	8003160 <HAL_UARTEx_RxEventCallback>
 80035b8:	e002      	b.n	80035c0 <UART_Receive_IT+0x16a>
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fc fffc 	bl	80005b8 <HAL_UART_RxCpltCallback>
      }

      return HAL_OK;
    }
 80035c0:	2300      	movs	r3, #0
 80035c2:	e002      	b.n	80035ca <UART_Receive_IT+0x174>
    return HAL_OK;
  }
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <UART_Receive_IT+0x174>
  else
  {
    return HAL_BUSY;
  }
 80035c8:	2302      	movs	r3, #2
}

 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	@ 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <UART_SetConfig>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b0c0      	sub	sp, #256	@ 0x100
 80035da:	af00      	add	r7, sp, #0
 80035dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);

 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	68d9      	ldr	r1, [r3, #12]
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	ea40 0301 	orr.w	r3, r0, r1
 80035fc:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	431a      	orrs	r2, r3
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800362c:	f021 010c 	bic.w	r1, r1, #12
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800363a:	430b      	orrs	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);

 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	6999      	ldr	r1, [r3, #24]
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	ea40 0301 	orr.w	r3, r0, r1
 800365a:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b8f      	ldr	r3, [pc, #572]	@ (80038a0 <UART_SetConfig+0x2cc>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d005      	beq.n	8003674 <UART_SetConfig+0xa0>
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b8d      	ldr	r3, [pc, #564]	@ (80038a4 <UART_SetConfig+0x2d0>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d104      	bne.n	800367e <UART_SetConfig+0xaa>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
 8003674:	f7fe f9c6 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 8003678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800367c:	e003      	b.n	8003686 <UART_SetConfig+0xb2>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
 800367e:	f7fe f9ad 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 8003682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003690:	f040 810c 	bne.w	80038ac <UART_SetConfig+0x2d8>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
 8003694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003698:	2200      	movs	r2, #0
 800369a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800369e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	1891      	adds	r1, r2, r2
 80036ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ae:	415b      	adcs	r3, r3
 80036b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036b6:	4621      	mov	r1, r4
 80036b8:	eb12 0801 	adds.w	r8, r2, r1
 80036bc:	4629      	mov	r1, r5
 80036be:	eb43 0901 	adc.w	r9, r3, r1
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d6:	4690      	mov	r8, r2
 80036d8:	4699      	mov	r9, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	eb18 0303 	adds.w	r3, r8, r3
 80036e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036e4:	462b      	mov	r3, r5
 80036e6:	eb49 0303 	adc.w	r3, r9, r3
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003702:	460b      	mov	r3, r1
 8003704:	18db      	adds	r3, r3, r3
 8003706:	653b      	str	r3, [r7, #80]	@ 0x50
 8003708:	4613      	mov	r3, r2
 800370a:	eb42 0303 	adc.w	r3, r2, r3
 800370e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003718:	f7fc fd74 	bl	8000204 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4b61      	ldr	r3, [pc, #388]	@ (80038a8 <UART_SetConfig+0x2d4>)
 8003722:	fba3 2302 	umull	r2, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	011c      	lsls	r4, r3, #4
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	1891      	adds	r1, r2, r2
 8003742:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003744:	415b      	adcs	r3, r3
 8003746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800374c:	4641      	mov	r1, r8
 800374e:	eb12 0a01 	adds.w	sl, r2, r1
 8003752:	4649      	mov	r1, r9
 8003754:	eb43 0b01 	adc.w	fp, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800376c:	4692      	mov	sl, r2
 800376e:	469b      	mov	fp, r3
 8003770:	4643      	mov	r3, r8
 8003772:	eb1a 0303 	adds.w	r3, sl, r3
 8003776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800377a:	464b      	mov	r3, r9
 800377c:	eb4b 0303 	adc.w	r3, fp, r3
 8003780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003798:	460b      	mov	r3, r1
 800379a:	18db      	adds	r3, r3, r3
 800379c:	643b      	str	r3, [r7, #64]	@ 0x40
 800379e:	4613      	mov	r3, r2
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ae:	f7fc fd29 	bl	8000204 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <UART_SetConfig+0x2d4>)
 80037ba:	fba3 2301 	umull	r2, r3, r3, r1
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2264      	movs	r2, #100	@ 0x64
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	1acb      	subs	r3, r1, r3
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037ce:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <UART_SetConfig+0x2d4>)
 80037d0:	fba3 2302 	umull	r2, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037dc:	441c      	add	r4, r3
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037f8:	415b      	adcs	r3, r3
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003800:	4641      	mov	r1, r8
 8003802:	1851      	adds	r1, r2, r1
 8003804:	6339      	str	r1, [r7, #48]	@ 0x30
 8003806:	4649      	mov	r1, r9
 8003808:	414b      	adcs	r3, r1
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003818:	4659      	mov	r1, fp
 800381a:	00cb      	lsls	r3, r1, #3
 800381c:	4651      	mov	r1, sl
 800381e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003822:	4651      	mov	r1, sl
 8003824:	00ca      	lsls	r2, r1, #3
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	4603      	mov	r3, r0
 800382c:	4642      	mov	r2, r8
 800382e:	189b      	adds	r3, r3, r2
 8003830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003834:	464b      	mov	r3, r9
 8003836:	460a      	mov	r2, r1
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800384c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003854:	460b      	mov	r3, r1
 8003856:	18db      	adds	r3, r3, r3
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385a:	4613      	mov	r3, r2
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800386a:	f7fc fccb 	bl	8000204 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <UART_SetConfig+0x2d4>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	@ 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	3332      	adds	r3, #50	@ 0x32
 8003886:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <UART_SetConfig+0x2d4>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4422      	add	r2, r4
 800389a:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}

 800389c:	e106      	b.n	8003aac <UART_SetConfig+0x4d8>
 800389e:	bf00      	nop
 80038a0:	40011000 	.word	0x40011000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	51eb851f 	.word	0x51eb851f
  }
 80038ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	1891      	adds	r1, r2, r2
 80038c4:	6239      	str	r1, [r7, #32]
 80038c6:	415b      	adcs	r3, r3
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ce:	4641      	mov	r1, r8
 80038d0:	1854      	adds	r4, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0501 	adc.w	r5, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	00eb      	lsls	r3, r5, #3
 80038e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e6:	00e2      	lsls	r2, r4, #3
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038f4:	464b      	mov	r3, r9
 80038f6:	eb45 0303 	adc.w	r3, r5, r3
 80038fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800390a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800391a:	4629      	mov	r1, r5
 800391c:	008b      	lsls	r3, r1, #2
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003924:	4621      	mov	r1, r4
 8003926:	008a      	lsls	r2, r1, #2
 8003928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800392c:	f7fc fc6a 	bl	8000204 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4b60      	ldr	r3, [pc, #384]	@ (8003ab8 <UART_SetConfig+0x4e4>)
 8003936:	fba3 2302 	umull	r2, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	011c      	lsls	r4, r3, #4
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800394c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	1891      	adds	r1, r2, r2
 8003956:	61b9      	str	r1, [r7, #24]
 8003958:	415b      	adcs	r3, r3
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003960:	4641      	mov	r1, r8
 8003962:	1851      	adds	r1, r2, r1
 8003964:	6139      	str	r1, [r7, #16]
 8003966:	4649      	mov	r1, r9
 8003968:	414b      	adcs	r3, r1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003978:	4659      	mov	r1, fp
 800397a:	00cb      	lsls	r3, r1, #3
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003982:	4651      	mov	r1, sl
 8003984:	00ca      	lsls	r2, r1, #3
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	4603      	mov	r3, r0
 800398c:	4642      	mov	r2, r8
 800398e:	189b      	adds	r3, r3, r2
 8003990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003994:	464b      	mov	r3, r9
 8003996:	460a      	mov	r2, r1
 8003998:	eb42 0303 	adc.w	r3, r2, r3
 800399c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039b8:	4649      	mov	r1, r9
 80039ba:	008b      	lsls	r3, r1, #2
 80039bc:	4641      	mov	r1, r8
 80039be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c2:	4641      	mov	r1, r8
 80039c4:	008a      	lsls	r2, r1, #2
 80039c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039ca:	f7fc fc1b 	bl	8000204 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	4b38      	ldr	r3, [pc, #224]	@ (8003ab8 <UART_SetConfig+0x4e4>)
 80039d6:	fba3 2301 	umull	r2, r3, r3, r1
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2264      	movs	r2, #100	@ 0x64
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	1acb      	subs	r3, r1, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	@ 0x32
 80039e8:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <UART_SetConfig+0x4e4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	441c      	add	r4, r3
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80039fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	1891      	adds	r1, r2, r2
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a14:	4641      	mov	r1, r8
 8003a16:	1851      	adds	r1, r2, r1
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	414b      	adcs	r3, r1
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a2c:	4659      	mov	r1, fp
 8003a2e:	00cb      	lsls	r3, r1, #3
 8003a30:	4651      	mov	r1, sl
 8003a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a36:	4651      	mov	r1, sl
 8003a38:	00ca      	lsls	r2, r1, #3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4642      	mov	r2, r8
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a46:	464b      	mov	r3, r9
 8003a48:	460a      	mov	r2, r1
 8003a4a:	eb42 0303 	adc.w	r3, r2, r3
 8003a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a68:	4649      	mov	r1, r9
 8003a6a:	008b      	lsls	r3, r1, #2
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a72:	4641      	mov	r1, r8
 8003a74:	008a      	lsls	r2, r1, #2
 8003a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a7a:	f7fc fbc3 	bl	8000204 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <UART_SetConfig+0x4e4>)
 8003a84:	fba3 1302 	umull	r1, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	2164      	movs	r1, #100	@ 0x64
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	3332      	adds	r3, #50	@ 0x32
 8003a96:	4a08      	ldr	r2, [pc, #32]	@ (8003ab8 <UART_SetConfig+0x4e4>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4422      	add	r2, r4
 8003aaa:	609a      	str	r2, [r3, #8]

 8003aac:	bf00      	nop
 8003aae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab8:	51eb851f 	.word	0x51eb851f

08003abc <memset>:
 8003abc:	4402      	add	r2, r0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <strstr>:
 8003acc:	780a      	ldrb	r2, [r1, #0]
 8003ace:	b570      	push	{r4, r5, r6, lr}
 8003ad0:	b96a      	cbnz	r2, 8003aee <strstr+0x22>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d109      	bne.n	8003aec <strstr+0x20>
 8003ad8:	460c      	mov	r4, r1
 8003ada:	4605      	mov	r5, r0
 8003adc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f6      	beq.n	8003ad2 <strstr+0x6>
 8003ae4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003ae8:	429e      	cmp	r6, r3
 8003aea:	d0f7      	beq.n	8003adc <strstr+0x10>
 8003aec:	3001      	adds	r0, #1
 8003aee:	7803      	ldrb	r3, [r0, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <strstr+0x8>
 8003af4:	4618      	mov	r0, r3
 8003af6:	e7ec      	b.n	8003ad2 <strstr+0x6>

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	@ (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	@ (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003ba4 	.word	0x08003ba4
 8003b34:	08003ba4 	.word	0x08003ba4
 8003b38:	08003ba4 	.word	0x08003ba4
 8003b3c:	08003ba8 	.word	0x08003ba8

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
